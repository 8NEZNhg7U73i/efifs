From 846131b962c85048acffcd4f14f96a2d192f11f5 Mon Sep 17 00:00:00 2001
From: Pete Batard <pete@akeo.ie>
Date: Fri, 28 Jul 2017 16:56:39 +0100
Subject: [PATCH 4/4] EDK2 Compatibility fixes

---
 grub-core/fs/zfs/zfs_lz4.c |  1 -
 grub-core/io/gzio.c        | 40 ++++++++++++++++++++--------------------
 grub-core/lib/crypto.c     |  4 ++--
 3 files changed, 22 insertions(+), 23 deletions(-)

diff --git a/grub-core/fs/zfs/zfs_lz4.c b/grub-core/fs/zfs/zfs_lz4.c
index 053d1f7..c20cf5f 100644
--- a/grub-core/fs/zfs/zfs_lz4.c
+++ b/grub-core/fs/zfs/zfs_lz4.c
@@ -73,7 +73,6 @@ static int LZ4_uncompress_unknownOutputSize(const char *source, char *dest,
 #define	U32	grub_uint32_t
 #define	S32	grub_int32_t
 #define	U64	grub_uint64_t
-typedef grub_size_t size_t;
 
 typedef struct _U16_S {
 	U16 v;
diff --git a/grub-core/io/gzio.c b/grub-core/io/gzio.c
index 0f2ea6b..150e250 100644
--- a/grub-core/io/gzio.c
+++ b/grub-core/io/gzio.c
@@ -140,24 +140,24 @@ eat_field (grub_file_t file, int len)
 #define OLD_GZIP_MAGIC	grub_le_to_cpu16 (0x9E1F)
 
 /* Compression methods (see algorithm.doc) */
-#define STORED      0
-#define COMPRESSED  1
-#define PACKED      2
-#define LZHED       3
+#define GZ_STORED      0
+#define GZ_COMPRESSED  1
+#define GZ_PACKED      2
+#define GZ_LZHED       3
 /* methods 4 to 7 reserved */
-#define DEFLATED    8
-#define MAX_METHODS 9
+#define GZ_DEFLATED    8
+#define GZ_MAX_METHODS 9
 
 /* gzip flag byte */
-#define ASCII_FLAG   0x01	/* bit 0 set: file probably ascii text */
-#define CONTINUATION 0x02	/* bit 1 set: continuation of multi-part gzip file */
-#define EXTRA_FIELD  0x04	/* bit 2 set: extra field present */
-#define ORIG_NAME    0x08	/* bit 3 set: original file name present */
-#define COMMENT      0x10	/* bit 4 set: file comment present */
-#define ENCRYPTED    0x20	/* bit 5 set: file is encrypted */
-#define RESERVED     0xC0	/* bit 6,7:   reserved */
+#define GZ_ASCII_FLAG   0x01	/* bit 0 set: file probably ascii text */
+#define GZ_CONTINUATION 0x02	/* bit 1 set: continuation of multi-part gzip file */
+#define GZ_EXTRA_FIELD  0x04	/* bit 2 set: extra field present */
+#define GZ_ORIG_NAME    0x08	/* bit 3 set: original file name present */
+#define GZ_COMMENT      0x10	/* bit 4 set: file comment present */
+#define GZ_ENCRYPTED    0x20	/* bit 5 set: file is encrypted */
+#define GZ_RESERVED     0xC0	/* bit 6,7:   reserved */
 
-#define UNSUPPORTED_FLAGS	(CONTINUATION | ENCRYPTED | RESERVED)
+#define GZ_UNSUPPORTED_FLAGS	(GZ_CONTINUATION | GZ_ENCRYPTED | GZ_RESERVED)
 
 /* inflate block codes */
 #define INFLATE_STORED	0
@@ -201,14 +201,14 @@ test_gzip_header (grub_file_t file)
    *  problem occurs from here on, then we have corrupt or otherwise
    *  bad data, and the error should be reported to the user.
    */
-  if (hdr.method != DEFLATED
-      || (hdr.flags & UNSUPPORTED_FLAGS)
-      || ((hdr.flags & EXTRA_FIELD)
+  if (hdr.method != GZ_DEFLATED
+      || (hdr.flags & GZ_UNSUPPORTED_FLAGS)
+      || ((hdr.flags & GZ_EXTRA_FIELD)
 	  && (grub_file_read (gzio->file, &extra_len, 2) != 2
 	      || eat_field (gzio->file,
 			    grub_le_to_cpu16 (extra_len))))
-      || ((hdr.flags & ORIG_NAME) && eat_field (gzio->file, -1))
-      || ((hdr.flags & COMMENT) && eat_field (gzio->file, -1)))
+      || ((hdr.flags & GZ_ORIG_NAME) && eat_field (gzio->file, -1))
+      || ((hdr.flags & GZ_COMMENT) && eat_field (gzio->file, -1)))
     return 0;
 
   gzio->data_offset = grub_file_tell (gzio->file);
@@ -1183,7 +1183,7 @@ test_zlib_header (grub_gzio_t gzio)
   flg = get_byte (gzio);
 
   /* Check that compression method is DEFLATE.  */
-  if ((cmf & 0xf) != DEFLATED)
+  if ((cmf & 0xf) != GZ_DEFLATED)
     {
       /* TRANSLATORS: It's about given file having some strange format, not
 	 complete lack of gzip support.  */
diff --git a/grub-core/lib/crypto.c b/grub-core/lib/crypto.c
index 683a8aa..620d439 100644
--- a/grub-core/lib/crypto.c
+++ b/grub-core/lib/crypto.c
@@ -462,7 +462,7 @@ grub_password_get (char buf[], unsigned buf_size)
       if (key == '\n' || key == '\r')
 	break;
 
-      if (key == '\e')
+      if (key == 0x1B)
 	{
 	  cur_len = 0;
 	  break;
@@ -487,7 +487,7 @@ grub_password_get (char buf[], unsigned buf_size)
   grub_xputs ("\n");
   grub_refresh ();
 
-  return (key != '\e');
+  return (key != 0x1B);
 }
 #endif
 
-- 
2.9.3.windows.2

