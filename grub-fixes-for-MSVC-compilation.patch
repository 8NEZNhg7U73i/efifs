From 9b9a55fbaf25c78077f1735ab449c1a2cb57a256 Mon Sep 17 00:00:00 2001
From: Pete Batard <pete@akeo.ie>
Date: Sat, 13 Dec 2014 03:27:41 +0000
Subject: [PATCH] fixes for MSVC compilation

---
 grub-core/fs/bfs.c          |  6 +++---
 grub-core/fs/fat.c          |  8 ++++++--
 grub-core/fs/iso9660.c      | 36 ++++++++++++++++++++++++------------
 grub-core/fs/ntfs.c         |  6 ++++--
 grub-core/fs/reiserfs.c     | 11 ++---------
 grub-core/fs/zfs/zfs.c      |  6 +++---
 grub-core/kern/misc.c       | 16 ++++++++--------
 include/grub/misc.h         |  6 +++---
 include/grub/ntfs.h         |  2 ++
 include/grub/types.h        | 42 +++++++++++++++++++++++++++++++-----------
 include/grub/x86_64/types.h |  2 +-
 11 files changed, 87 insertions(+), 54 deletions(-)

diff --git a/grub-core/fs/bfs.c b/grub-core/fs/bfs.c
index 145e771..86557b1 100644
--- a/grub-core/fs/bfs.c
+++ b/grub-core/fs/bfs.c
@@ -446,7 +446,7 @@ read_b_node (grub_disk_t disk,
   total_size = ALIGN_UP (sizeof (node_head) +
 			 grub_bfs_to_cpu_treehead
 			 (node_head.total_key_len),
-			 BTREE_ALIGN) +
+			 (grub_uint16_t) BTREE_ALIGN) +
     grub_bfs_to_cpu_treehead (node_head.count_keys) *
     sizeof (grub_uint16_t)
     + grub_bfs_to_cpu_treehead (node_head.count_keys) *
@@ -468,7 +468,7 @@ read_b_node (grub_disk_t disk,
   *keylen_idx = (grub_uint16_t *) ret
     + ALIGN_UP (sizeof (node_head) +
 		grub_bfs_to_cpu_treehead (node_head.total_key_len),
-		BTREE_ALIGN) / 2;
+		(grub_uint16_t) BTREE_ALIGN) / 2;
   *key_values = (grub_unaligned_uint64_t *)
     (*keylen_idx +
      grub_bfs_to_cpu_treehead (node_head.count_keys));
@@ -507,7 +507,7 @@ iterate_in_b_tree (grub_disk_t disk,
 			   + ALIGN_UP (sizeof (node) +
 				       grub_bfs_to_cpu_treehead (node.
 								 total_key_len),
-				       BTREE_ALIGN) +
+				       (grub_uint16_t) BTREE_ALIGN) +
 			   grub_bfs_to_cpu_treehead (node.count_keys) *
 			   sizeof (grub_uint16_t), &key_value,
 			   sizeof (grub_uint64_t), 0, 0);
diff --git a/grub-core/fs/fat.c b/grub-core/fs/fat.c
index 79fe864..eef80fa 100644
--- a/grub-core/fs/fat.c
+++ b/grub-core/fs/fat.c
@@ -74,6 +74,7 @@ enum
   {
     FLAG_CONTIGUOUS = 2
   };
+PRAGMA_BEGIN_PACKED
 struct grub_fat_dir_entry
 {
   grub_uint8_t entry_type;
@@ -114,6 +115,7 @@ struct grub_fat_dir_entry
     }  GRUB_PACKED  volume_label;
   }  GRUB_PACKED type_specific;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_fat_dir_node
 {
@@ -128,6 +130,7 @@ struct grub_fat_dir_node
 typedef struct grub_fat_dir_node grub_fat_dir_node_t;
 
 #else
+PRAGMA_BEGIN_PACKED
 struct grub_fat_dir_entry
 {
   grub_uint8_t name[11];
@@ -155,6 +158,7 @@ struct grub_fat_long_name_entry
   grub_uint16_t first_cluster;
   grub_uint16_t name3[2];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 typedef struct grub_fat_dir_entry grub_fat_dir_node_t;
 
@@ -721,7 +725,7 @@ grub_fat_iterate_dir_next (grub_disk_t disk, struct grub_fat_data *data,
       grub_dprintf ("exfat", "unknown primary type 0x%02x\n",
 		    dir.entry_type);
     }
-  return grub_errno ? : GRUB_ERR_EOF;
+  return grub_errno ? grub_errno : GRUB_ERR_EOF;
 }
 
 #else
@@ -846,7 +850,7 @@ grub_fat_iterate_dir_next (grub_disk_t disk, struct grub_fat_data *data,
       return GRUB_ERR_NONE;
     }
 
-  return grub_errno ? : GRUB_ERR_EOF;
+  return grub_errno ? grub_errno : GRUB_ERR_EOF;
 }
 
 #endif
diff --git a/grub-core/fs/iso9660.c b/grub-core/fs/iso9660.c
index 6a66773..decd8d3 100644
--- a/grub-core/fs/iso9660.c
+++ b/grub-core/fs/iso9660.c
@@ -49,6 +49,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define GRUB_ISO9660_VOLDESC_END	255
 
 /* The head of a volume descriptor.  */
+PRAGMA_BEGIN_PACKED
 struct grub_iso9660_voldesc
 {
   grub_uint8_t type;
@@ -129,8 +130,18 @@ struct grub_iso9660_susp_entry
 {
   grub_uint8_t sig[2];
   grub_uint8_t len;
-  grub_uint8_t version;
-  grub_uint8_t data[0];
+/*! MSVC compilers cannot handle a zero sized array in the middle
+    of a struct, and grub_iso9660_susp_entry is reused within
+    grub_iso9660_susp_ce. Therefore, instead of defining:
+        grub_uint8_t version;
+        grub_uint8_t data[];
+    we leverage the fact that these attributes are the same size
+    and use an union. The only gotcha is that the actual
+    payload of u.data[] starts at 1, not 0. */
+  union {
+    grub_uint8_t  version;
+    grub_uint8_t  data[1];
+  } u;
 } GRUB_PACKED;
 
 /* The CE entry.  This is used to describe the next block where data
@@ -145,6 +156,7 @@ struct grub_iso9660_susp_ce
   grub_uint32_t len;
   grub_uint32_t len_be;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_iso9660_data
 {
@@ -412,7 +424,7 @@ set_rockridge (struct grub_iso9660_data *data)
 
       /* The 2nd data byte stored how many bytes are skipped every time
 	 to get to the SUA (System Usage Area).  */
-      data->susp_skip = entry->data[2];
+      data->susp_skip = entry->u.data[1 + 2];
       entry = (struct grub_iso9660_susp_entry *) ((char *) entry + entry->len);
 
       /* Iterate over the entries in the SUA area to detect
@@ -552,9 +564,9 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
       /* The flags are stored at the data position 0, here the
 	 filename type is stored.  */
       /* FIXME: Fix this slightly improper cast.  */
-      if (entry->data[0] & GRUB_ISO9660_RR_DOT)
+      if (entry->u.data[1 + 0] & GRUB_ISO9660_RR_DOT)
 	ctx->filename = (char *) ".";
-      else if (entry->data[0] & GRUB_ISO9660_RR_DOTDOT)
+      else if (entry->u.data[1 + 0] & GRUB_ISO9660_RR_DOTDOT)
 	ctx->filename = (char *) "..";
       else if (entry->len >= 5)
 	{
@@ -578,7 +590,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 	      return grub_errno;
 	    }
 	  ctx->filename_alloc = 1;
-	  grub_memcpy (ctx->filename + off, (char *) &entry->data[1], csize);
+	  grub_memcpy (ctx->filename + off, (char *) &entry->u.data[1 + 1], csize);
 	  ctx->filename[off + csize] = '\0';
 	}
     }
@@ -587,7 +599,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
     {
       /* At position 0 of the PX record the st_mode information is
 	 stored (little-endian).  */
-      grub_uint32_t mode = ((entry->data[0] + (entry->data[1] << 8))
+      grub_uint32_t mode = ((entry->u.data[1 + 0] + (entry->u.data[1 + 1] << 8))
 			    & GRUB_ISO9660_FSTYPE_MASK);
 
       switch (mode)
@@ -613,7 +625,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
       while (pos + sizeof (*entry) < entry->len)
 	{
 	  /* The current position is the `Component Flag'.  */
-	  switch (entry->data[pos] & 30)
+	  switch (entry->u.data[1 + pos] & 30)
 	    {
 	    case 0:
 	      {
@@ -622,9 +634,9 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 		   Record'.  */
 		if (ctx->symlink && !ctx->was_continue)
 		  add_part (ctx, "/", 1);
-		add_part (ctx, (char *) &entry->data[pos + 2],
-			  entry->data[pos + 1]);
-		ctx->was_continue = (entry->data[pos] & 1);
+		add_part (ctx, (char *) &entry->u.data[1 + pos + 2],
+			  entry->u.data[1 + pos + 1]);
+		ctx->was_continue = (entry->u.data[1 + pos] & 1);
 		break;
 	      }
 
@@ -642,7 +654,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 	    }
 	  /* In pos + 1 the length of the `Component Record' is
 	     stored.  */
-	  pos += entry->data[pos + 1] + 2;
+	  pos += entry->u.data[1 + pos + 1] + 2;
 	}
 
       /* Check if `grub_realloc' failed.  */
diff --git a/grub-core/fs/ntfs.c b/grub-core/fs/ntfs.c
index d3a91f5..1c9bd59 100644
--- a/grub-core/fs/ntfs.c
+++ b/grub-core/fs/ntfs.c
@@ -635,6 +635,7 @@ list_file (struct grub_ntfs_file *diro, grub_uint8_t *pos,
   return 0;
 }
 
+PRAGMA_BEGIN_PACKED
 struct symlink_descriptor
 {
   grub_uint32_t type;
@@ -644,6 +645,7 @@ struct symlink_descriptor
   grub_uint16_t off2;
   grub_uint16_t len2;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 static char *
 grub_ntfs_read_symlink (grub_fshelp_node_t node)
@@ -985,9 +987,9 @@ grub_ntfs_dir_iter (const char *filename, enum grub_fshelp_filetype filetype,
   grub_memset (&info, 0, sizeof (info));
   info.dir = ((filetype & GRUB_FSHELP_TYPE_MASK) == GRUB_FSHELP_DIR);
   info.mtimeset = 1;
-  info.mtime = grub_divmod64 (node->mtime, 10000000, 0) 
+  info.mtime = (grub_int32_t) (grub_divmod64 (node->mtime, 10000000, 0)
     - 86400ULL * 365 * (1970 - 1601)
-    - 86400ULL * ((1970 - 1601) / 4) + 86400ULL * ((1970 - 1601) / 100);
+    - 86400ULL * ((1970 - 1601) / 4) + 86400ULL * ((1970 - 1601) / 100));
   grub_free (node);
   return ctx->hook (filename, &info, ctx->hook_data);
 }
diff --git a/grub-core/fs/reiserfs.c b/grub-core/fs/reiserfs.c
index ac65054..b4e8255 100644
--- a/grub-core/fs/reiserfs.c
+++ b/grub-core/fs/reiserfs.c
@@ -42,15 +42,8 @@
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
-#define MIN(a, b) \
-  ({ typeof (a) _a = (a); \
-     typeof (b) _b = (b); \
-     _a < _b ? _a : _b; })
-
-#define MAX(a, b) \
-  ({ typeof (a) _a = (a); \
-     typeof (b) _b = (b); \
-     _a > _b ? _a : _b; })
+#define MIN(a, b) ((a)<(b)?(a):(b))
+#define MAX(a, b) ((a)>(b)?(a):(b))
 
 #define REISERFS_SUPER_BLOCK_OFFSET 0x10000
 #define REISERFS_MAGIC_LEN 12
diff --git a/grub-core/fs/zfs/zfs.c b/grub-core/fs/zfs/zfs.c
index cfb25c0..081cb76 100644
--- a/grub-core/fs/zfs/zfs.c
+++ b/grub-core/fs/zfs/zfs.c
@@ -1172,7 +1172,7 @@ scan_disk (grub_device_t dev, struct grub_zfs_data *data,
 	= label * (sizeof (vdev_label_t) >> SPA_MINBLOCKSHIFT)
 	+ ((VDEV_SKIP_SIZE + VDEV_BOOT_HEADER_SIZE) >> SPA_MINBLOCKSHIFT)
 	+ (label < VDEV_LABELS / 2 ? 0 : 
-	   ALIGN_DOWN (grub_disk_get_size (dev->disk), sizeof (vdev_label_t))
+	   ALIGN_DOWN (grub_disk_get_size (dev->disk), (grub_uint64_t) sizeof (vdev_label_t))
 	   - VDEV_LABELS * (sizeof (vdev_label_t) >> SPA_MINBLOCKSHIFT));
 
       /* Read in the uberblock ring (128K). */
@@ -1836,7 +1836,7 @@ zio_read (blkptr_t *bp, grub_zfs_endian_t endian, void **buf,
   if (comp != ZIO_COMPRESS_OFF)
     {
       /* It's not really necessary to align to 16, just for safety.  */
-      compbuf = grub_malloc (ALIGN_UP (psize, 16));
+      compbuf = grub_malloc (ALIGN_UP (psize, (grub_size_t) 16));
       if (! compbuf)
 	return grub_errno;
     }
@@ -1851,7 +1851,7 @@ zio_read (blkptr_t *bp, grub_zfs_endian_t endian, void **buf,
       *buf = NULL;
       return err;
     }
-  grub_memset (compbuf, 0, ALIGN_UP (psize, 16) - psize);
+  grub_memset (compbuf, 0, ALIGN_UP (psize, (grub_size_t) 16) - psize);
 
   err = zio_checksum_verify (zc, checksum, endian,
 			     compbuf, psize);
diff --git a/grub-core/kern/misc.c b/grub-core/kern/misc.c
index c5c815d..c178571 100644
--- a/grub-core/kern/misc.c
+++ b/grub-core/kern/misc.c
@@ -157,7 +157,7 @@ grub_puts_ (const char *s)
   return grub_puts (_(s));
 }
 
-#if defined (__APPLE__) && ! defined (GRUB_UTIL)
+#if ( defined (__APPLE__) || defined (_MSC_VER) ) && ! defined (GRUB_UTIL)
 int
 grub_err_printf (const char *fmt, ...)
 {
@@ -172,7 +172,7 @@ grub_err_printf (const char *fmt, ...)
 }
 #endif
 
-#if ! defined (__APPLE__) && ! defined (GRUB_UTIL)
+#if ! defined (__APPLE__) && ! defined (_MSC_VER) && ! defined (GRUB_UTIL)
 int grub_err_printf (const char *fmt, ...)
 __attribute__ ((alias("grub_printf")));
 #endif
@@ -233,7 +233,7 @@ grub_vprintf (const char *fmt, va_list ap)
   if (curbuf != buf)
     grub_free (curbuf);
 
-  return s;
+  return (int) s;
 }
 
 int
@@ -787,7 +787,7 @@ grub_lltoa (char *str, int c, unsigned long long n)
 	grub_uint64_t m;
 
 	n = grub_divmod64 (n, 10, &m);
-	*p++ = m + '0';
+	*p++ = (char)m + '0';
       }
     while (n);
 
@@ -1094,7 +1094,7 @@ grub_vsnprintf_real (char *str, grub_size_t max_len, const char *fmt0,
 
 	case 'C':
 	  {
-	    grub_uint32_t code = curarg;
+	    grub_uint32_t code = (grub_uint32_t) curarg;
 	    int shift;
 	    unsigned mask;
 
@@ -1136,7 +1136,7 @@ grub_vsnprintf_real (char *str, grub_size_t max_len, const char *fmt0,
 	  {
 	    grub_size_t len = 0;
 	    grub_size_t fill;
-	    const char *p = ((char *) (grub_addr_t) curarg) ? : "(null)";
+	    const char *p = (curarg != 0) ? ((char *) (grub_addr_t) curarg) : "(null)";
 	    grub_size_t i;
 
 	    while (len < format2 && p[len])
@@ -1168,7 +1168,7 @@ grub_vsnprintf_real (char *str, grub_size_t max_len, const char *fmt0,
     str[count] = '\0';
   else
     str[max_len] = '\0';
-  return count;
+  return (int) count;
 }
 
 int
@@ -1188,7 +1188,7 @@ grub_vsnprintf (char *str, grub_size_t n, const char *fmt, va_list ap)
 
   free_printf_args (&args);
 
-  return ret < n ? ret : n;
+  return (int) (ret < n ? ret : n);
 }
 
 int
diff --git a/include/grub/misc.h b/include/grub/misc.h
index c6cd456..caefffd 100644
--- a/include/grub/misc.h
+++ b/include/grub/misc.h
@@ -28,10 +28,10 @@
 #include <grub/compiler.h>
 
 #define ALIGN_UP(addr, align) \
-	((addr + (typeof (addr)) align - 1) & ~((typeof (addr)) align - 1))
-#define ALIGN_UP_OVERHEAD(addr, align) ((-(addr)) & ((typeof (addr)) (align) - 1))
+	((addr + align - 1) & ~(align - 1))
+#define ALIGN_UP_OVERHEAD(addr, align) ((-(addr)) & ((align) - 1))
 #define ALIGN_DOWN(addr, align) \
-	((addr) & ~((typeof (addr)) align - 1))
+	((addr) & ~(align - 1))
 #define ARRAY_SIZE(array) (sizeof (array) / sizeof (array[0]))
 #define COMPILE_TIME_ASSERT(cond) switch (0) { case 1: case !(cond): ; }
 
diff --git a/include/grub/ntfs.h b/include/grub/ntfs.h
index d1a6af6..f43bdef 100644
--- a/include/grub/ntfs.h
+++ b/include/grub/ntfs.h
@@ -101,6 +101,7 @@ enum
     GRUB_NTFS_RF_BLNK		= 1
   };
 
+PRAGMA_BEGIN_PACKED
 struct grub_ntfs_bpb
 {
   grub_uint8_t jmp_boot[3];
@@ -126,6 +127,7 @@ struct grub_ntfs_bpb
   grub_uint64_t num_serial;
   grub_uint32_t checksum;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_ntfs_attr
 {
diff --git a/include/grub/types.h b/include/grub/types.h
index 79f765c..1c6c510 100644
--- a/include/grub/types.h
+++ b/include/grub/types.h
@@ -26,10 +26,20 @@
 
 #ifdef __MINGW32__
 #define GRUB_PACKED __attribute__ ((packed,gcc_struct))
+#elif defined(_MSC_VER)
+#define GRUB_PACKED 
 #else
 #define GRUB_PACKED __attribute__ ((packed))
 #endif
 
+#ifdef _MSC_VER
+#define PRAGMA_BEGIN_PACKED __pragma(pack(push, 1))
+#define PRAGMA_END_PACKED   __pragma(pack(pop))
+#else
+#define PRAGMA_BEGIN_PACKED
+#define PRAGMA_END_PACKED
+#endif
+
 #ifdef GRUB_BUILD
 # define GRUB_CPU_SIZEOF_VOID_P	BUILD_SIZEOF_VOID_P
 # define GRUB_CPU_SIZEOF_LONG	BUILD_SIZEOF_LONG
@@ -167,17 +177,15 @@ static inline grub_uint16_t grub_swap_bytes16(grub_uint16_t _x)
 #define grub_swap_bytes16_compile_time(x) ((((x) & 0xff) << 8) | (((x) & 0xff00) >> 8))
 #define grub_swap_bytes32_compile_time(x) ((((x) & 0xff) << 24) | (((x) & 0xff00) << 8) | (((x) & 0xff0000) >> 8) | (((x) & 0xff000000UL) >> 24))
 #define grub_swap_bytes64_compile_time(x)	\
-({ \
-   grub_uint64_t _x = (x); \
-   (grub_uint64_t) ((_x << 56) \
-                    | ((_x & (grub_uint64_t) 0xFF00ULL) << 40) \
-                    | ((_x & (grub_uint64_t) 0xFF0000ULL) << 24) \
-                    | ((_x & (grub_uint64_t) 0xFF000000ULL) << 8) \
-                    | ((_x & (grub_uint64_t) 0xFF00000000ULL) >> 8) \
-                    | ((_x & (grub_uint64_t) 0xFF0000000000ULL) >> 24) \
-                    | ((_x & (grub_uint64_t) 0xFF000000000000ULL) >> 40) \
-                    | (_x >> 56)); \
-})
+((grub_uint64_t) ((((grub_uint64_t)x) << 56) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF00ULL) << 40) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF0000ULL) << 24) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF000000ULL) << 8) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF00000000ULL) >> 8) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF0000000000ULL) >> 24) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF000000000000ULL) >> 40) \
+                    | (((grub_uint64_t)x) >> 56)) \
+)
 
 #if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC__ > 4 || __GNUC_MINOR__ >= 3)
 static inline grub_uint32_t grub_swap_bytes32(grub_uint32_t x)
@@ -256,10 +264,12 @@ static inline grub_uint64_t grub_swap_bytes64(grub_uint64_t _x)
 
 static inline grub_uint16_t grub_get_unaligned16 (const void *ptr)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint16_t
   {
     grub_uint16_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   const struct grub_unaligned_uint16_t *dd
     = (const struct grub_unaligned_uint16_t *) ptr;
   return dd->d;
@@ -267,20 +277,24 @@ static inline grub_uint16_t grub_get_unaligned16 (const void *ptr)
 
 static inline void grub_set_unaligned16 (void *ptr, grub_uint16_t val)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint16_t
   {
     grub_uint16_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   struct grub_unaligned_uint16_t *dd = (struct grub_unaligned_uint16_t *) ptr;
   dd->d = val;
 }
 
 static inline grub_uint32_t grub_get_unaligned32 (const void *ptr)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint32_t
   {
     grub_uint32_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   const struct grub_unaligned_uint32_t *dd
     = (const struct grub_unaligned_uint32_t *) ptr;
   return dd->d;
@@ -288,18 +302,22 @@ static inline grub_uint32_t grub_get_unaligned32 (const void *ptr)
 
 static inline void grub_set_unaligned32 (void *ptr, grub_uint32_t val)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint32_t
   {
     grub_uint32_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   struct grub_unaligned_uint32_t *dd = (struct grub_unaligned_uint32_t *) ptr;
   dd->d = val;
 }
 
+PRAGMA_BEGIN_PACKED
 struct grub_unaligned_uint64
 {
   grub_uint64_t val;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 typedef struct grub_unaligned_uint64 grub_unaligned_uint64_t;
 
@@ -312,10 +330,12 @@ static inline grub_uint64_t grub_get_unaligned64 (const void *ptr)
 
 static inline void grub_set_unaligned64 (void *ptr, grub_uint64_t val)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint64_t
   {
     grub_uint64_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   struct grub_unaligned_uint64_t *dd = (struct grub_unaligned_uint64_t *) ptr;
   dd->d = val;
 }
diff --git a/include/grub/x86_64/types.h b/include/grub/x86_64/types.h
index fec9109..5be8ffa 100644
--- a/include/grub/x86_64/types.h
+++ b/include/grub/x86_64/types.h
@@ -23,7 +23,7 @@
 #define GRUB_TARGET_SIZEOF_VOID_P	8
 
 /* The size of long.  */
-#ifdef __MINGW32__
+#if defined(__MINGW32__) || defined(_MSC_VER)
 #define GRUB_TARGET_SIZEOF_LONG		4
 #else
 #define GRUB_TARGET_SIZEOF_LONG		8
-- 
1.9.4.msysgit.2

