From 1f16fea3dc2fc438a5a6f75fc590f3411768bb7f Mon Sep 17 00:00:00 2001
From: Pete Batard <pete@akeo.ie>
Date: Tue, 16 Dec 2014 19:57:09 +0000
Subject: [PATCH] fixes for MSVC compilation

---
 grub-core/fs/affs.c         |  2 ++
 grub-core/fs/bfs.c          |  8 +++++---
 grub-core/fs/btrfs.c        |  6 ++++++
 grub-core/fs/fat.c          |  8 ++++++--
 grub-core/fs/hfs.c          |  6 ++++++
 grub-core/fs/hfsplus.c      |  2 ++
 grub-core/fs/hfspluscomp.c  |  5 +++++
 grub-core/fs/iso9660.c      | 36 ++++++++++++++++++++++++------------
 grub-core/fs/jfs.c          |  2 ++
 grub-core/fs/nilfs2.c       |  2 ++
 grub-core/fs/ntfs.c         |  6 ++++--
 grub-core/fs/reiserfs.c     | 13 ++++---------
 grub-core/fs/sfs.c          |  3 ++-
 grub-core/fs/udf.c          |  2 ++
 grub-core/fs/ufs.c          |  2 ++
 grub-core/fs/xfs.c          |  3 ++-
 grub-core/fs/zfs/zfs.c      | 10 +++++-----
 grub-core/kern/misc.c       | 16 ++++++++--------
 include/grub/btrfs.h        |  4 +++-
 include/grub/hfs.h          |  2 ++
 include/grub/hfsplus.h      |  6 ++++++
 include/grub/misc.h         |  6 +++---
 include/grub/ntfs.h         |  2 ++
 include/grub/types.h        | 42 +++++++++++++++++++++++++++++++-----------
 include/grub/x86_64/types.h |  2 +-
 include/grub/zfs/zap_leaf.h | 17 ++++++++++++++---
 include/grub/zfs/zio.h      |  2 ++
 27 files changed, 153 insertions(+), 62 deletions(-)

diff --git a/grub-core/fs/affs.c b/grub-core/fs/affs.c
index f673897..84247ca 100644
--- a/grub-core/fs/affs.c
+++ b/grub-core/fs/affs.c
@@ -30,6 +30,7 @@
 GRUB_MOD_LICENSE ("GPLv3+");
 
 /* The affs bootblock.  */
+PRAGMA_BEGIN_PACKED
 struct grub_affs_bblock
 {
   grub_uint8_t type[3];
@@ -77,6 +78,7 @@ struct grub_affs_file
   grub_uint32_t extension;
   grub_uint32_t type;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* The location of `struct grub_affs_file' relative to the end of a
    file header block.  */
diff --git a/grub-core/fs/bfs.c b/grub-core/fs/bfs.c
index 145e771..897c8c1 100644
--- a/grub-core/fs/bfs.c
+++ b/grub-core/fs/bfs.c
@@ -68,6 +68,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define DOUBLE_INDIRECT_SHIFT 2
 
 #define LOG_EXTENT_SIZE 3
+PRAGMA_BEGIN_PACKED
 struct grub_bfs_extent
 {
   grub_uint32_t ag;
@@ -166,6 +167,7 @@ struct grub_bfs_btree_node
   grub_uint16_t total_key_len;
 #endif
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_bfs_data
 {
@@ -446,7 +448,7 @@ read_b_node (grub_disk_t disk,
   total_size = ALIGN_UP (sizeof (node_head) +
 			 grub_bfs_to_cpu_treehead
 			 (node_head.total_key_len),
-			 BTREE_ALIGN) +
+			 (grub_uint16_t) BTREE_ALIGN) +
     grub_bfs_to_cpu_treehead (node_head.count_keys) *
     sizeof (grub_uint16_t)
     + grub_bfs_to_cpu_treehead (node_head.count_keys) *
@@ -468,7 +470,7 @@ read_b_node (grub_disk_t disk,
   *keylen_idx = (grub_uint16_t *) ret
     + ALIGN_UP (sizeof (node_head) +
 		grub_bfs_to_cpu_treehead (node_head.total_key_len),
-		BTREE_ALIGN) / 2;
+		(grub_uint16_t) BTREE_ALIGN) / 2;
   *key_values = (grub_unaligned_uint64_t *)
     (*keylen_idx +
      grub_bfs_to_cpu_treehead (node_head.count_keys));
@@ -507,7 +509,7 @@ iterate_in_b_tree (grub_disk_t disk,
 			   + ALIGN_UP (sizeof (node) +
 				       grub_bfs_to_cpu_treehead (node.
 								 total_key_len),
-				       BTREE_ALIGN) +
+				       (grub_uint16_t) BTREE_ALIGN) +
 			   grub_bfs_to_cpu_treehead (node.count_keys) *
 			   sizeof (grub_uint16_t), &key_value,
 			   sizeof (grub_uint64_t), 0, 0);
diff --git a/grub-core/fs/btrfs.c b/grub-core/fs/btrfs.c
index f7b6c15..a6d4ed4 100644
--- a/grub-core/fs/btrfs.c
+++ b/grub-core/fs/btrfs.c
@@ -48,6 +48,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 typedef grub_uint8_t grub_btrfs_checksum_t[0x20];
 typedef grub_uint16_t grub_btrfs_uuid_t[8];
 
+PRAGMA_BEGIN_PACKED
 struct grub_btrfs_device
 {
   grub_uint64_t device_id;
@@ -81,6 +82,7 @@ struct btrfs_header
   grub_uint32_t nitems;
   grub_uint8_t level;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_btrfs_device_desc
 {
@@ -107,6 +109,7 @@ struct grub_btrfs_data
   struct grub_btrfs_extent_data *extent;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_btrfs_chunk_item
 {
   grub_uint64_t size;
@@ -157,6 +160,7 @@ struct grub_btrfs_dir_item
   grub_uint8_t type;
   char name[0];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_btrfs_leaf_descriptor
 {
@@ -177,6 +181,7 @@ struct grub_btrfs_time
   grub_uint32_t nanosec;
 } __attribute__ ((aligned (4)));
 
+PRAGMA_BEGIN_PACKED
 struct grub_btrfs_inode
 {
   grub_uint8_t dummy1[0x10];
@@ -205,6 +210,7 @@ struct grub_btrfs_extent_data
     };
   };
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 #define GRUB_BTRFS_EXTENT_INLINE 0
 #define GRUB_BTRFS_EXTENT_REGULAR 1
diff --git a/grub-core/fs/fat.c b/grub-core/fs/fat.c
index 79fe864..eef80fa 100644
--- a/grub-core/fs/fat.c
+++ b/grub-core/fs/fat.c
@@ -74,6 +74,7 @@ enum
   {
     FLAG_CONTIGUOUS = 2
   };
+PRAGMA_BEGIN_PACKED
 struct grub_fat_dir_entry
 {
   grub_uint8_t entry_type;
@@ -114,6 +115,7 @@ struct grub_fat_dir_entry
     }  GRUB_PACKED  volume_label;
   }  GRUB_PACKED type_specific;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_fat_dir_node
 {
@@ -128,6 +130,7 @@ struct grub_fat_dir_node
 typedef struct grub_fat_dir_node grub_fat_dir_node_t;
 
 #else
+PRAGMA_BEGIN_PACKED
 struct grub_fat_dir_entry
 {
   grub_uint8_t name[11];
@@ -155,6 +158,7 @@ struct grub_fat_long_name_entry
   grub_uint16_t first_cluster;
   grub_uint16_t name3[2];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 typedef struct grub_fat_dir_entry grub_fat_dir_node_t;
 
@@ -721,7 +725,7 @@ grub_fat_iterate_dir_next (grub_disk_t disk, struct grub_fat_data *data,
       grub_dprintf ("exfat", "unknown primary type 0x%02x\n",
 		    dir.entry_type);
     }
-  return grub_errno ? : GRUB_ERR_EOF;
+  return grub_errno ? grub_errno : GRUB_ERR_EOF;
 }
 
 #else
@@ -846,7 +850,7 @@ grub_fat_iterate_dir_next (grub_disk_t disk, struct grub_fat_data *data,
       return GRUB_ERR_NONE;
     }
 
-  return grub_errno ? : GRUB_ERR_EOF;
+  return grub_errno ? grub_errno : GRUB_ERR_EOF;
 }
 
 #endif
diff --git a/grub-core/fs/hfs.c b/grub-core/fs/hfs.c
index 1e59305..95d9f3e 100644
--- a/grub-core/fs/hfs.c
+++ b/grub-core/fs/hfs.c
@@ -57,6 +57,7 @@ enum grub_hfs_cnid_type
   };
 
 /* A node descriptor.  This is the header of every node.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfs_node
 {
   grub_uint32_t next;
@@ -82,6 +83,7 @@ struct grub_hfs_treeheader
   grub_uint32_t free_nodes;
   grub_uint8_t unused[76];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* The state of a mounted HFS filesystem.  */
 struct grub_hfs_data
@@ -102,6 +104,7 @@ struct grub_hfs_data
 
 /* The key as used on disk in a catalog tree.  This is used to lookup
    file/directory nodes by parent directory ID and filename.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfs_catalog_key
 {
   grub_uint8_t unused;
@@ -155,6 +158,7 @@ struct grub_hfs_filerec
      in the extent overflow file.  */
   grub_hfs_datarecord_t extents;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* A record descriptor, both key and data, used to pass to call back
    functions.  */
@@ -708,11 +712,13 @@ grub_hfs_iterate_records (struct grub_hfs_data *data, int type, int idx,
       for (i = 0; i < grub_be_to_cpu16 (node->node.reccnt); i++)
 	{
 	  int pos = (nodesize >> 1) - 1 - i;
+	  PRAGMA_BEGIN_PACKED
  	  struct pointer
 	  {
 	    grub_uint8_t keylen;
 	    grub_uint8_t key;
 	  } GRUB_PACKED *pnt;
+	  PRAGMA_END_PACKED
 	  pnt = (struct pointer *) (grub_be_to_cpu16 (node->offsets[pos])
 				    + node->rawnode);
 
diff --git a/grub-core/fs/hfsplus.c b/grub-core/fs/hfsplus.c
index 950d8a1..5d15d68 100644
--- a/grub-core/fs/hfsplus.c
+++ b/grub-core/fs/hfsplus.c
@@ -44,6 +44,7 @@ enum grub_hfsplus_btnode_type
   };
 
 /* The header of a HFS+ B+ Tree.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_btheader
 {
   grub_uint16_t depth;
@@ -76,6 +77,7 @@ struct grub_hfsplus_catfile
   struct grub_hfsplus_forkdata data;
   struct grub_hfsplus_forkdata resource;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* Filetype information as used in inodes.  */
 #define GRUB_HFSPLUS_FILEMODE_MASK	0170000
diff --git a/grub-core/fs/hfspluscomp.c b/grub-core/fs/hfspluscomp.c
index d76f3f1..28c586d 100644
--- a/grub-core/fs/hfspluscomp.c
+++ b/grub-core/fs/hfspluscomp.c
@@ -24,10 +24,12 @@
 #include <grub/mm.h>
 #include <grub/deflate.h>
 #include <grub/file.h>
+#include <grub/types.h>
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
 /* big-endian.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_compress_header1
 {
   grub_uint32_t header_size;
@@ -48,6 +50,7 @@ struct grub_hfsplus_compress_header3
 {
   grub_uint32_t num_chunks;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* little-endian.  */
 struct grub_hfsplus_compress_block_descriptor
@@ -56,6 +59,7 @@ struct grub_hfsplus_compress_block_descriptor
   grub_uint32_t size;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_compress_end_descriptor
 {
   grub_uint8_t always_the_same[50];
@@ -76,6 +80,7 @@ struct grub_hfsplus_compress_attr
   grub_uint32_t uncompressed_inline_size;
   grub_uint32_t always_0;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 enum
   {
diff --git a/grub-core/fs/iso9660.c b/grub-core/fs/iso9660.c
index 6a66773..decd8d3 100644
--- a/grub-core/fs/iso9660.c
+++ b/grub-core/fs/iso9660.c
@@ -49,6 +49,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define GRUB_ISO9660_VOLDESC_END	255
 
 /* The head of a volume descriptor.  */
+PRAGMA_BEGIN_PACKED
 struct grub_iso9660_voldesc
 {
   grub_uint8_t type;
@@ -129,8 +130,18 @@ struct grub_iso9660_susp_entry
 {
   grub_uint8_t sig[2];
   grub_uint8_t len;
-  grub_uint8_t version;
-  grub_uint8_t data[0];
+/*! MSVC compilers cannot handle a zero sized array in the middle
+    of a struct, and grub_iso9660_susp_entry is reused within
+    grub_iso9660_susp_ce. Therefore, instead of defining:
+        grub_uint8_t version;
+        grub_uint8_t data[];
+    we leverage the fact that these attributes are the same size
+    and use an union. The only gotcha is that the actual
+    payload of u.data[] starts at 1, not 0. */
+  union {
+    grub_uint8_t  version;
+    grub_uint8_t  data[1];
+  } u;
 } GRUB_PACKED;
 
 /* The CE entry.  This is used to describe the next block where data
@@ -145,6 +156,7 @@ struct grub_iso9660_susp_ce
   grub_uint32_t len;
   grub_uint32_t len_be;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_iso9660_data
 {
@@ -412,7 +424,7 @@ set_rockridge (struct grub_iso9660_data *data)
 
       /* The 2nd data byte stored how many bytes are skipped every time
 	 to get to the SUA (System Usage Area).  */
-      data->susp_skip = entry->data[2];
+      data->susp_skip = entry->u.data[1 + 2];
       entry = (struct grub_iso9660_susp_entry *) ((char *) entry + entry->len);
 
       /* Iterate over the entries in the SUA area to detect
@@ -552,9 +564,9 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
       /* The flags are stored at the data position 0, here the
 	 filename type is stored.  */
       /* FIXME: Fix this slightly improper cast.  */
-      if (entry->data[0] & GRUB_ISO9660_RR_DOT)
+      if (entry->u.data[1 + 0] & GRUB_ISO9660_RR_DOT)
 	ctx->filename = (char *) ".";
-      else if (entry->data[0] & GRUB_ISO9660_RR_DOTDOT)
+      else if (entry->u.data[1 + 0] & GRUB_ISO9660_RR_DOTDOT)
 	ctx->filename = (char *) "..";
       else if (entry->len >= 5)
 	{
@@ -578,7 +590,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 	      return grub_errno;
 	    }
 	  ctx->filename_alloc = 1;
-	  grub_memcpy (ctx->filename + off, (char *) &entry->data[1], csize);
+	  grub_memcpy (ctx->filename + off, (char *) &entry->u.data[1 + 1], csize);
 	  ctx->filename[off + csize] = '\0';
 	}
     }
@@ -587,7 +599,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
     {
       /* At position 0 of the PX record the st_mode information is
 	 stored (little-endian).  */
-      grub_uint32_t mode = ((entry->data[0] + (entry->data[1] << 8))
+      grub_uint32_t mode = ((entry->u.data[1 + 0] + (entry->u.data[1 + 1] << 8))
 			    & GRUB_ISO9660_FSTYPE_MASK);
 
       switch (mode)
@@ -613,7 +625,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
       while (pos + sizeof (*entry) < entry->len)
 	{
 	  /* The current position is the `Component Flag'.  */
-	  switch (entry->data[pos] & 30)
+	  switch (entry->u.data[1 + pos] & 30)
 	    {
 	    case 0:
 	      {
@@ -622,9 +634,9 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 		   Record'.  */
 		if (ctx->symlink && !ctx->was_continue)
 		  add_part (ctx, "/", 1);
-		add_part (ctx, (char *) &entry->data[pos + 2],
-			  entry->data[pos + 1]);
-		ctx->was_continue = (entry->data[pos] & 1);
+		add_part (ctx, (char *) &entry->u.data[1 + pos + 2],
+			  entry->u.data[1 + pos + 1]);
+		ctx->was_continue = (entry->u.data[1 + pos] & 1);
 		break;
 	      }
 
@@ -642,7 +654,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 	    }
 	  /* In pos + 1 the length of the `Component Record' is
 	     stored.  */
-	  pos += entry->data[pos + 1] + 2;
+	  pos += entry->u.data[1 + pos + 1] + 2;
 	}
 
       /* Check if `grub_realloc' failed.  */
diff --git a/grub-core/fs/jfs.c b/grub-core/fs/jfs.c
index aab3e8c..4ec849a 100644
--- a/grub-core/fs/jfs.c
+++ b/grub-core/fs/jfs.c
@@ -61,6 +61,7 @@ struct grub_jfs_sblock
   char volname2[16];
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_jfs_extent
 {
   /* The length of the extent in filesystem blocks.  */
@@ -252,6 +253,7 @@ struct grub_jfs_diropen
   char name[256 * GRUB_MAX_UTF8_PER_UTF16 + 1];
   grub_uint32_t ino;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 
 static grub_dl_t my_mod;
diff --git a/grub-core/fs/nilfs2.c b/grub-core/fs/nilfs2.c
index 388ee18..52ba994 100644
--- a/grub-core/fs/nilfs2.c
+++ b/grub-core/fs/nilfs2.c
@@ -132,6 +132,7 @@ struct grub_nilfs2_super_block
   grub_uint32_t s_reserved[192];
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_nilfs2_dir_entry
 {
   grub_uint64_t inode;
@@ -144,6 +145,7 @@ struct grub_nilfs2_dir_entry
   char pad;
 #endif
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 enum
 {
diff --git a/grub-core/fs/ntfs.c b/grub-core/fs/ntfs.c
index d3a91f5..1c9bd59 100644
--- a/grub-core/fs/ntfs.c
+++ b/grub-core/fs/ntfs.c
@@ -635,6 +635,7 @@ list_file (struct grub_ntfs_file *diro, grub_uint8_t *pos,
   return 0;
 }
 
+PRAGMA_BEGIN_PACKED
 struct symlink_descriptor
 {
   grub_uint32_t type;
@@ -644,6 +645,7 @@ struct symlink_descriptor
   grub_uint16_t off2;
   grub_uint16_t len2;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 static char *
 grub_ntfs_read_symlink (grub_fshelp_node_t node)
@@ -985,9 +987,9 @@ grub_ntfs_dir_iter (const char *filename, enum grub_fshelp_filetype filetype,
   grub_memset (&info, 0, sizeof (info));
   info.dir = ((filetype & GRUB_FSHELP_TYPE_MASK) == GRUB_FSHELP_DIR);
   info.mtimeset = 1;
-  info.mtime = grub_divmod64 (node->mtime, 10000000, 0) 
+  info.mtime = (grub_int32_t) (grub_divmod64 (node->mtime, 10000000, 0)
     - 86400ULL * 365 * (1970 - 1601)
-    - 86400ULL * ((1970 - 1601) / 4) + 86400ULL * ((1970 - 1601) / 100);
+    - 86400ULL * ((1970 - 1601) / 4) + 86400ULL * ((1970 - 1601) / 100));
   grub_free (node);
   return ctx->hook (filename, &info, ctx->hook_data);
 }
diff --git a/grub-core/fs/reiserfs.c b/grub-core/fs/reiserfs.c
index ac65054..e95c976 100644
--- a/grub-core/fs/reiserfs.c
+++ b/grub-core/fs/reiserfs.c
@@ -42,15 +42,8 @@
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
-#define MIN(a, b) \
-  ({ typeof (a) _a = (a); \
-     typeof (b) _b = (b); \
-     _a < _b ? _a : _b; })
-
-#define MAX(a, b) \
-  ({ typeof (a) _a = (a); \
-     typeof (b) _b = (b); \
-     _a > _b ? _a : _b; })
+#define MIN(a, b) ((a)<(b)?(a):(b))
+#define MAX(a, b) ((a)>(b)?(a):(b))
 
 #define REISERFS_SUPER_BLOCK_OFFSET 0x10000
 #define REISERFS_MAGIC_LEN 12
@@ -82,6 +75,7 @@ enum grub_reiserfs_item_type
     GRUB_REISERFS_UNKNOWN
   };
 
+PRAGMA_BEGIN_PACKED
 struct grub_reiserfs_superblock
 {
   grub_uint32_t block_count;
@@ -217,6 +211,7 @@ struct grub_reiserfs_directory_header
   grub_uint16_t location;
   grub_uint16_t state;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_fshelp_node
 {
diff --git a/grub-core/fs/sfs.c b/grub-core/fs/sfs.c
index 6c82150..bf596c7 100644
--- a/grub-core/fs/sfs.c
+++ b/grub-core/fs/sfs.c
@@ -30,6 +30,7 @@
 GRUB_MOD_LICENSE ("GPLv3+");
 
 /* The common header for a block.  */
+PRAGMA_BEGIN_PACKED
 struct grub_sfs_bheader
 {
   grub_uint8_t magic[4];
@@ -121,7 +122,7 @@ struct grub_sfs_btree
      supported.  */
   struct grub_sfs_btree_node node[1];
 } GRUB_PACKED;
-
+PRAGMA_END_PACKED
 
 
 struct cache_entry
diff --git a/grub-core/fs/udf.c b/grub-core/fs/udf.c
index fd41283..eadb0c8 100644
--- a/grub-core/fs/udf.c
+++ b/grub-core/fs/udf.c
@@ -113,6 +113,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define GRUB_UDF_PARTMAP_TYPE_1		1
 #define GRUB_UDF_PARTMAP_TYPE_2		2
 
+PRAGMA_BEGIN_PACKED
 struct grub_udf_lb_addr
 {
   grub_uint32_t block_num;
@@ -344,6 +345,7 @@ struct grub_udf_aed
   grub_uint32_t prev_ae;
   grub_uint32_t ae_len;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_udf_data
 {
diff --git a/grub-core/fs/ufs.c b/grub-core/fs/ufs.c
index 4a2161c..963a8a0 100644
--- a/grub-core/fs/ufs.c
+++ b/grub-core/fs/ufs.c
@@ -152,6 +152,7 @@ struct grub_ufs_sblock
   grub_uint32_t magic;
 };
 
+PRAGMA_BEGIN_PACKED
 #ifdef MODE_UFS2
 /* UFS inode.  */
 struct grub_ufs_inode
@@ -235,6 +236,7 @@ struct grub_ufs_dirent
     };
   };
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* Information about a "mounted" ufs filesystem.  */
 struct grub_ufs_data
diff --git a/grub-core/fs/xfs.c b/grub-core/fs/xfs.c
index 16ffd3f..151d671 100644
--- a/grub-core/fs/xfs.c
+++ b/grub-core/fs/xfs.c
@@ -34,7 +34,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define XFS_INODE_FORMAT_EXT	2
 #define XFS_INODE_FORMAT_BTREE	3
 
-
+PRAGMA_BEGIN_PACKED
 struct grub_xfs_sblock
 {
   grub_uint8_t magic[4];
@@ -141,6 +141,7 @@ struct grub_xfs_dirblock_tail
   grub_uint32_t leaf_count;
   grub_uint32_t leaf_stale;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_fshelp_node
 {
diff --git a/grub-core/fs/zfs/zfs.c b/grub-core/fs/zfs/zfs.c
index cfb25c0..a9e3cf6 100644
--- a/grub-core/fs/zfs/zfs.c
+++ b/grub-core/fs/zfs/zfs.c
@@ -141,7 +141,7 @@ ZAP_LEAF_NUMCHUNKS (int bs)
 static inline zap_leaf_chunk_t *
 ZAP_LEAF_CHUNK (zap_leaf_phys_t *l, int bs, int idx)
 {
-  return &((zap_leaf_chunk_t *) (l->l_entries 
+  return &((zap_leaf_chunk_t *) (l->u.l_entries 
 				 + (ZAP_LEAF_HASH_NUMENTRIES(bs) * 2)
 				 / sizeof (grub_properly_aligned_t)))[idx];
 }
@@ -1172,7 +1172,7 @@ scan_disk (grub_device_t dev, struct grub_zfs_data *data,
 	= label * (sizeof (vdev_label_t) >> SPA_MINBLOCKSHIFT)
 	+ ((VDEV_SKIP_SIZE + VDEV_BOOT_HEADER_SIZE) >> SPA_MINBLOCKSHIFT)
 	+ (label < VDEV_LABELS / 2 ? 0 : 
-	   ALIGN_DOWN (grub_disk_get_size (dev->disk), sizeof (vdev_label_t))
+	   ALIGN_DOWN (grub_disk_get_size (dev->disk), (grub_uint64_t) sizeof (vdev_label_t))
 	   - VDEV_LABELS * (sizeof (vdev_label_t) >> SPA_MINBLOCKSHIFT));
 
       /* Read in the uberblock ring (128K). */
@@ -1836,7 +1836,7 @@ zio_read (blkptr_t *bp, grub_zfs_endian_t endian, void **buf,
   if (comp != ZIO_COMPRESS_OFF)
     {
       /* It's not really necessary to align to 16, just for safety.  */
-      compbuf = grub_malloc (ALIGN_UP (psize, 16));
+      compbuf = grub_malloc (ALIGN_UP (psize, (grub_size_t) 16));
       if (! compbuf)
 	return grub_errno;
     }
@@ -1851,7 +1851,7 @@ zio_read (blkptr_t *bp, grub_zfs_endian_t endian, void **buf,
       *buf = NULL;
       return err;
     }
-  grub_memset (compbuf, 0, ALIGN_UP (psize, 16) - psize);
+  grub_memset (compbuf, 0, ALIGN_UP (psize, (grub_size_t) 16) - psize);
 
   err = zio_checksum_verify (zc, checksum, endian,
 			     compbuf, psize);
@@ -2195,7 +2195,7 @@ zap_leaf_lookup (zap_leaf_phys_t * l, grub_zfs_endian_t endian,
   if (grub_zfs_to_cpu32 (l->l_hdr.lh_magic, endian) != ZAP_LEAF_MAGIC)
     return grub_error (GRUB_ERR_BAD_FS, "invalid leaf magic");
 
-  for (chunk = grub_zfs_to_cpu16 (l->l_hash[LEAF_HASH (blksft, h, l)], endian);
+  for (chunk = grub_zfs_to_cpu16 (l->u.l_hash[LEAF_HASH (blksft, h, l)], endian);
        chunk != CHAIN_END; chunk = grub_zfs_to_cpu16 (le->le_next, endian))
     {
 
diff --git a/grub-core/kern/misc.c b/grub-core/kern/misc.c
index c5c815d..c178571 100644
--- a/grub-core/kern/misc.c
+++ b/grub-core/kern/misc.c
@@ -157,7 +157,7 @@ grub_puts_ (const char *s)
   return grub_puts (_(s));
 }
 
-#if defined (__APPLE__) && ! defined (GRUB_UTIL)
+#if ( defined (__APPLE__) || defined (_MSC_VER) ) && ! defined (GRUB_UTIL)
 int
 grub_err_printf (const char *fmt, ...)
 {
@@ -172,7 +172,7 @@ grub_err_printf (const char *fmt, ...)
 }
 #endif
 
-#if ! defined (__APPLE__) && ! defined (GRUB_UTIL)
+#if ! defined (__APPLE__) && ! defined (_MSC_VER) && ! defined (GRUB_UTIL)
 int grub_err_printf (const char *fmt, ...)
 __attribute__ ((alias("grub_printf")));
 #endif
@@ -233,7 +233,7 @@ grub_vprintf (const char *fmt, va_list ap)
   if (curbuf != buf)
     grub_free (curbuf);
 
-  return s;
+  return (int) s;
 }
 
 int
@@ -787,7 +787,7 @@ grub_lltoa (char *str, int c, unsigned long long n)
 	grub_uint64_t m;
 
 	n = grub_divmod64 (n, 10, &m);
-	*p++ = m + '0';
+	*p++ = (char)m + '0';
       }
     while (n);
 
@@ -1094,7 +1094,7 @@ grub_vsnprintf_real (char *str, grub_size_t max_len, const char *fmt0,
 
 	case 'C':
 	  {
-	    grub_uint32_t code = curarg;
+	    grub_uint32_t code = (grub_uint32_t) curarg;
 	    int shift;
 	    unsigned mask;
 
@@ -1136,7 +1136,7 @@ grub_vsnprintf_real (char *str, grub_size_t max_len, const char *fmt0,
 	  {
 	    grub_size_t len = 0;
 	    grub_size_t fill;
-	    const char *p = ((char *) (grub_addr_t) curarg) ? : "(null)";
+	    const char *p = (curarg != 0) ? ((char *) (grub_addr_t) curarg) : "(null)";
 	    grub_size_t i;
 
 	    while (len < format2 && p[len])
@@ -1168,7 +1168,7 @@ grub_vsnprintf_real (char *str, grub_size_t max_len, const char *fmt0,
     str[count] = '\0';
   else
     str[max_len] = '\0';
-  return count;
+  return (int) count;
 }
 
 int
@@ -1188,7 +1188,7 @@ grub_vsnprintf (char *str, grub_size_t n, const char *fmt, va_list ap)
 
   free_printf_args (&args);
 
-  return ret < n ? ret : n;
+  return (int) (ret < n ? ret : n);
 }
 
 int
diff --git a/include/grub/btrfs.h b/include/grub/btrfs.h
index 9d93fb6..54e5618 100644
--- a/include/grub/btrfs.h
+++ b/include/grub/btrfs.h
@@ -16,6 +16,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
  */
+#include <grub/types.h>
 
 #ifndef GRUB_BTRFS_H
 #define GRUB_BTRFS_H	1
@@ -45,13 +46,14 @@ struct grub_btrfs_root_item
   grub_uint64_t inode;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_btrfs_key
 {
   grub_uint64_t object_id;
   grub_uint8_t type;
   grub_uint64_t offset;
 } GRUB_PACKED;
-
+PRAGMA_END_PACKED
 
 struct grub_btrfs_root_backref
 {
diff --git a/include/grub/hfs.h b/include/grub/hfs.h
index d935f50..beeca5d 100644
--- a/include/grub/hfs.h
+++ b/include/grub/hfs.h
@@ -36,6 +36,7 @@ typedef struct grub_hfs_extent grub_hfs_datarecord_t[3];
 
 /* The HFS superblock (The official name is `Master Directory
    Block').  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfs_sblock
 {
   grub_uint16_t magic;
@@ -68,5 +69,6 @@ struct grub_hfs_sblock
   grub_uint32_t catalog_size;
   grub_hfs_datarecord_t catalog_recs;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 #endif /* ! GRUB_HFS_HEADER */
diff --git a/include/grub/hfsplus.h b/include/grub/hfsplus.h
index 8ba8f32..36c632f 100644
--- a/include/grub/hfsplus.h
+++ b/include/grub/hfsplus.h
@@ -24,6 +24,7 @@
 #define GRUB_HFSPLUS_SBLOCK 2
 
 /* A HFS+ extent.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_extent
 {
   /* The first block of a file on disk.  */
@@ -68,6 +69,7 @@ struct grub_hfsplus_volheader
   struct grub_hfsplus_forkdata attr_file;
   struct grub_hfsplus_forkdata startup_file;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_hfsplus_compress_index
 {
@@ -138,6 +140,7 @@ struct grub_hfsplus_extkey_internal
   grub_uint8_t type;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_attrkey
 {
   grub_uint16_t keylen;
@@ -147,6 +150,7 @@ struct grub_hfsplus_attrkey
   grub_uint16_t namelen;
   grub_uint16_t name[0];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_hfsplus_attrkey_internal
 {
@@ -166,6 +170,7 @@ struct grub_hfsplus_key_internal
 };
 
 /* The on disk layout of a catalog key.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_catkey
 {
   grub_uint16_t keylen;
@@ -204,6 +209,7 @@ struct grub_hfsplus_btnode
   grub_uint16_t count;
   grub_uint16_t unused;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* Return the offset of the record with the index INDEX, in the node
    NODE which is part of the B+ tree BTREE.  */
diff --git a/include/grub/misc.h b/include/grub/misc.h
index c6cd456..caefffd 100644
--- a/include/grub/misc.h
+++ b/include/grub/misc.h
@@ -28,10 +28,10 @@
 #include <grub/compiler.h>
 
 #define ALIGN_UP(addr, align) \
-	((addr + (typeof (addr)) align - 1) & ~((typeof (addr)) align - 1))
-#define ALIGN_UP_OVERHEAD(addr, align) ((-(addr)) & ((typeof (addr)) (align) - 1))
+	((addr + align - 1) & ~(align - 1))
+#define ALIGN_UP_OVERHEAD(addr, align) ((-(addr)) & ((align) - 1))
 #define ALIGN_DOWN(addr, align) \
-	((addr) & ~((typeof (addr)) align - 1))
+	((addr) & ~(align - 1))
 #define ARRAY_SIZE(array) (sizeof (array) / sizeof (array[0]))
 #define COMPILE_TIME_ASSERT(cond) switch (0) { case 1: case !(cond): ; }
 
diff --git a/include/grub/ntfs.h b/include/grub/ntfs.h
index d1a6af6..f43bdef 100644
--- a/include/grub/ntfs.h
+++ b/include/grub/ntfs.h
@@ -101,6 +101,7 @@ enum
     GRUB_NTFS_RF_BLNK		= 1
   };
 
+PRAGMA_BEGIN_PACKED
 struct grub_ntfs_bpb
 {
   grub_uint8_t jmp_boot[3];
@@ -126,6 +127,7 @@ struct grub_ntfs_bpb
   grub_uint64_t num_serial;
   grub_uint32_t checksum;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_ntfs_attr
 {
diff --git a/include/grub/types.h b/include/grub/types.h
index 79f765c..1c6c510 100644
--- a/include/grub/types.h
+++ b/include/grub/types.h
@@ -26,10 +26,20 @@
 
 #ifdef __MINGW32__
 #define GRUB_PACKED __attribute__ ((packed,gcc_struct))
+#elif defined(_MSC_VER)
+#define GRUB_PACKED 
 #else
 #define GRUB_PACKED __attribute__ ((packed))
 #endif
 
+#ifdef _MSC_VER
+#define PRAGMA_BEGIN_PACKED __pragma(pack(push, 1))
+#define PRAGMA_END_PACKED   __pragma(pack(pop))
+#else
+#define PRAGMA_BEGIN_PACKED
+#define PRAGMA_END_PACKED
+#endif
+
 #ifdef GRUB_BUILD
 # define GRUB_CPU_SIZEOF_VOID_P	BUILD_SIZEOF_VOID_P
 # define GRUB_CPU_SIZEOF_LONG	BUILD_SIZEOF_LONG
@@ -167,17 +177,15 @@ static inline grub_uint16_t grub_swap_bytes16(grub_uint16_t _x)
 #define grub_swap_bytes16_compile_time(x) ((((x) & 0xff) << 8) | (((x) & 0xff00) >> 8))
 #define grub_swap_bytes32_compile_time(x) ((((x) & 0xff) << 24) | (((x) & 0xff00) << 8) | (((x) & 0xff0000) >> 8) | (((x) & 0xff000000UL) >> 24))
 #define grub_swap_bytes64_compile_time(x)	\
-({ \
-   grub_uint64_t _x = (x); \
-   (grub_uint64_t) ((_x << 56) \
-                    | ((_x & (grub_uint64_t) 0xFF00ULL) << 40) \
-                    | ((_x & (grub_uint64_t) 0xFF0000ULL) << 24) \
-                    | ((_x & (grub_uint64_t) 0xFF000000ULL) << 8) \
-                    | ((_x & (grub_uint64_t) 0xFF00000000ULL) >> 8) \
-                    | ((_x & (grub_uint64_t) 0xFF0000000000ULL) >> 24) \
-                    | ((_x & (grub_uint64_t) 0xFF000000000000ULL) >> 40) \
-                    | (_x >> 56)); \
-})
+((grub_uint64_t) ((((grub_uint64_t)x) << 56) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF00ULL) << 40) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF0000ULL) << 24) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF000000ULL) << 8) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF00000000ULL) >> 8) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF0000000000ULL) >> 24) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF000000000000ULL) >> 40) \
+                    | (((grub_uint64_t)x) >> 56)) \
+)
 
 #if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC__ > 4 || __GNUC_MINOR__ >= 3)
 static inline grub_uint32_t grub_swap_bytes32(grub_uint32_t x)
@@ -256,10 +264,12 @@ static inline grub_uint64_t grub_swap_bytes64(grub_uint64_t _x)
 
 static inline grub_uint16_t grub_get_unaligned16 (const void *ptr)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint16_t
   {
     grub_uint16_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   const struct grub_unaligned_uint16_t *dd
     = (const struct grub_unaligned_uint16_t *) ptr;
   return dd->d;
@@ -267,20 +277,24 @@ static inline grub_uint16_t grub_get_unaligned16 (const void *ptr)
 
 static inline void grub_set_unaligned16 (void *ptr, grub_uint16_t val)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint16_t
   {
     grub_uint16_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   struct grub_unaligned_uint16_t *dd = (struct grub_unaligned_uint16_t *) ptr;
   dd->d = val;
 }
 
 static inline grub_uint32_t grub_get_unaligned32 (const void *ptr)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint32_t
   {
     grub_uint32_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   const struct grub_unaligned_uint32_t *dd
     = (const struct grub_unaligned_uint32_t *) ptr;
   return dd->d;
@@ -288,18 +302,22 @@ static inline grub_uint32_t grub_get_unaligned32 (const void *ptr)
 
 static inline void grub_set_unaligned32 (void *ptr, grub_uint32_t val)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint32_t
   {
     grub_uint32_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   struct grub_unaligned_uint32_t *dd = (struct grub_unaligned_uint32_t *) ptr;
   dd->d = val;
 }
 
+PRAGMA_BEGIN_PACKED
 struct grub_unaligned_uint64
 {
   grub_uint64_t val;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 typedef struct grub_unaligned_uint64 grub_unaligned_uint64_t;
 
@@ -312,10 +330,12 @@ static inline grub_uint64_t grub_get_unaligned64 (const void *ptr)
 
 static inline void grub_set_unaligned64 (void *ptr, grub_uint64_t val)
 {
+PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint64_t
   {
     grub_uint64_t d;
   } GRUB_PACKED;
+PRAGMA_END_PACKED
   struct grub_unaligned_uint64_t *dd = (struct grub_unaligned_uint64_t *) ptr;
   dd->d = val;
 }
diff --git a/include/grub/x86_64/types.h b/include/grub/x86_64/types.h
index fec9109..5be8ffa 100644
--- a/include/grub/x86_64/types.h
+++ b/include/grub/x86_64/types.h
@@ -23,7 +23,7 @@
 #define GRUB_TARGET_SIZEOF_VOID_P	8
 
 /* The size of long.  */
-#ifdef __MINGW32__
+#if defined(__MINGW32__) || defined(_MSC_VER)
 #define GRUB_TARGET_SIZEOF_LONG		4
 #else
 #define GRUB_TARGET_SIZEOF_LONG		8
diff --git a/include/grub/zfs/zap_leaf.h b/include/grub/zfs/zap_leaf.h
index 95c67dc..1227aab 100644
--- a/include/grub/zfs/zap_leaf.h
+++ b/include/grub/zfs/zap_leaf.h
@@ -68,9 +68,18 @@ typedef struct zap_leaf_phys {
 	 * zap_leaf_chunk structures.  These structures are accessed
 	 * with the ZAP_LEAF_CHUNK() macro.
 	 */
-
-	grub_uint16_t l_hash[0];
-        grub_properly_aligned_t l_entries[0];
+	/* Use an union to work around MSVC limitations. This only works
+	 * here because this structure is not being included in another,
+	 * as you must be mindful that, in the MSVC world, a union of
+	 * zero sized arrays has a size of _1_, whereas in the gcc world,
+	 * it has a size of _0_ => if you were to including this structure
+	 * into another one, you would have to compute the offsets in a
+	 * different manner for MSVC and gcc.
+	 */
+	union {
+		grub_uint16_t l_hash[0];
+		grub_properly_aligned_t l_entries[0];
+	} u;
 } zap_leaf_phys_t;
 
 typedef union zap_leaf_chunk {
@@ -87,11 +96,13 @@ typedef union zap_leaf_chunk {
 	} l_entry;
 	struct zap_leaf_array {
 		grub_uint8_t la_type;		/* always ZAP_CHUNK_ARRAY */
+		PRAGMA_BEGIN_PACKED
 		union
 		{
 			grub_uint8_t la_array[ZAP_LEAF_ARRAY_BYTES];
 			grub_uint64_t la_array64;
 		} GRUB_PACKED;
+		PRAGMA_END_PACKED
 		grub_uint16_t la_next;		/* next blk or CHAIN_END */
 	} l_array;
 	struct zap_leaf_free {
diff --git a/include/grub/zfs/zio.h b/include/grub/zfs/zio.h
index 19ce136..11ee51b 100644
--- a/include/grub/zfs/zio.h
+++ b/include/grub/zfs/zio.h
@@ -27,10 +27,12 @@
 
 #define	ZEC_MAGIC	0x210da7ab10c7a11ULL	/* zio data bloc tail */
 
+PRAGMA_BEGIN_PACKED
 typedef struct zio_eck {
 	grub_uint64_t	zec_magic;	/* for validation, endianness	*/
 	zio_cksum_t	zec_cksum;	/* 256-bit checksum		*/
 } GRUB_PACKED zio_eck_t;
+PRAGMA_END_PACKED
 
 /*
  * Gang block headers are self-checksumming and contain an array
-- 
1.9.4.msysgit.2

