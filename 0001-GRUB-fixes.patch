From f071a4507ea2fa7b382087f323b6c70640b2288a Mon Sep 17 00:00:00 2001
From: Pete Batard <pete@akeo.ie>
Date: Wed, 22 Sep 2021 14:12:12 +0100
Subject: [PATCH] GRUB fixes

---
 grub-core/fs/affs.c                  |  2 ++
 grub-core/fs/bfs.c                   |  2 ++
 grub-core/fs/btrfs.c                 | 54 ++++++++++++++++++++++------
 grub-core/fs/f2fs.c                  |  2 ++
 grub-core/fs/fat.c                   |  8 +++--
 grub-core/fs/hfs.c                   |  6 ++++
 grub-core/fs/hfsplus.c               |  2 ++
 grub-core/fs/hfspluscomp.c           |  5 +++
 grub-core/fs/iso9660.c               | 36 ++++++++++++-------
 grub-core/fs/jfs.c                   |  2 ++
 grub-core/fs/nilfs2.c                |  4 ++-
 grub-core/fs/ntfs.c                  |  2 ++
 grub-core/fs/reiserfs.c              | 16 ++++++++-
 grub-core/fs/sfs.c                   |  4 ++-
 grub-core/fs/squash4.c               | 10 ++++--
 grub-core/fs/udf.c                   |  2 ++
 grub-core/fs/ufs.c                   |  2 ++
 grub-core/fs/xfs.c                   |  2 ++
 grub-core/fs/zfs/zfs.c               |  6 ++--
 grub-core/fs/zfs/zfs_lz4.c           |  2 ++
 grub-core/kern/misc.c                |  6 ++--
 grub-core/lib/minilzo/lzodefs.h      |  2 +-
 grub-core/lib/posix_wrap/limits.h    | 12 +++++++
 grub-core/lib/xzembed/xz_config.h    | 20 ++++++++---
 grub-core/lib/xzembed/xz_dec_lzma2.c |  4 ++-
 grub-core/lib/xzembed/xz_stream.h    |  2 +-
 include/grub/arm64/types.h           |  4 +++
 include/grub/btrfs.h                 |  3 ++
 include/grub/disk.h                  |  2 +-
 include/grub/exfat.h                 |  2 ++
 include/grub/fat.h                   |  2 ++
 include/grub/hfs.h                   |  2 ++
 include/grub/hfsplus.h               |  6 ++++
 include/grub/misc.h                  | 13 +++++++
 include/grub/ntfs.h                  |  2 ++
 include/grub/safemath.h              |  8 +++++
 include/grub/term.h                  |  4 +--
 include/grub/types.h                 | 42 +++++++++++++++-------
 include/grub/unicode.h               |  2 ++
 include/grub/x86_64/types.h          |  2 +-
 include/grub/zfs/zap_leaf.h          |  2 ++
 include/grub/zfs/zio.h               |  2 ++
 42 files changed, 253 insertions(+), 60 deletions(-)

diff --git a/grub-core/fs/affs.c b/grub-core/fs/affs.c
index cafcd0fba..d57cb5357 100644
--- a/grub-core/fs/affs.c
+++ b/grub-core/fs/affs.c
@@ -30,6 +30,7 @@
 GRUB_MOD_LICENSE ("GPLv3+");
 
 /* The affs bootblock.  */
+PRAGMA_BEGIN_PACKED
 struct grub_affs_bblock
 {
   grub_uint8_t type[3];
@@ -77,6 +78,7 @@ struct grub_affs_file
   grub_uint32_t extension;
   grub_uint32_t type;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* The location of `struct grub_affs_file' relative to the end of a
    file header block.  */
diff --git a/grub-core/fs/bfs.c b/grub-core/fs/bfs.c
index 47dbe2011..236aa0b9f 100644
--- a/grub-core/fs/bfs.c
+++ b/grub-core/fs/bfs.c
@@ -69,6 +69,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define DOUBLE_INDIRECT_SHIFT 2
 
 #define LOG_EXTENT_SIZE 3
+PRAGMA_BEGIN_PACKED
 struct grub_bfs_extent
 {
   grub_uint32_t ag;
@@ -167,6 +168,7 @@ struct grub_bfs_btree_node
   grub_uint16_t total_key_len;
 #endif
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_bfs_data
 {
diff --git a/grub-core/fs/btrfs.c b/grub-core/fs/btrfs.c
index 63203034d..ed270badb 100644
--- a/grub-core/fs/btrfs.c
+++ b/grub-core/fs/btrfs.c
@@ -17,6 +17,7 @@
  *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
  */
 
+#ifndef NO_ZSTD
 /*
  * Tell zstd to expose functions that aren't part of the stable API, which
  * aren't safe to use when linking against a dynamic library. We vendor in a
@@ -24,6 +25,7 @@
  * functions to provide our own allocator, which uses grub_malloc(), to zstd.
  */
 #define ZSTD_STATIC_LINKING_ONLY
+#endif
 
 #include <grub/err.h>
 #include <grub/file.h>
@@ -35,7 +37,9 @@
 #include <grub/lib/crc.h>
 #include <grub/deflate.h>
 #include <minilzo.h>
+#ifndef NO_ZSTD
 #include <zstd.h>
+#endif
 #include <grub/i18n.h>
 #include <grub/btrfs.h>
 #include <grub/crypto.h>
@@ -57,12 +61,15 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define GRUB_BTRFS_LZO_BLOCK_MAX_CSIZE (GRUB_BTRFS_LZO_BLOCK_SIZE + \
 				     (GRUB_BTRFS_LZO_BLOCK_SIZE / 16) + 64 + 3)
 
+#ifndef NO_ZSTD
 #define ZSTD_BTRFS_MAX_WINDOWLOG 17
 #define ZSTD_BTRFS_MAX_INPUT     (1 << ZSTD_BTRFS_MAX_WINDOWLOG)
+#endif
 
 typedef grub_uint8_t grub_btrfs_checksum_t[0x20];
 typedef grub_uint16_t grub_btrfs_uuid_t[8];
 
+PRAGMA_BEGIN_PACKED
 struct grub_btrfs_device
 {
   grub_uint64_t device_id;
@@ -97,6 +104,7 @@ struct btrfs_header
   grub_uint32_t nitems;
   grub_uint8_t level;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_btrfs_device_desc
 {
@@ -111,8 +119,8 @@ struct grub_btrfs_data
   grub_uint64_t inode;
 
   struct grub_btrfs_device_desc *devices_attached;
-  unsigned n_devices_attached;
-  unsigned n_devices_allocated;
+  grub_size_t n_devices_attached;
+  grub_size_t n_devices_allocated;
 
   /* Cached extent data.  */
   grub_uint64_t extstart;
@@ -123,6 +131,7 @@ struct grub_btrfs_data
   struct grub_btrfs_extent_data *extent;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_btrfs_chunk_item
 {
   grub_uint64_t size;
@@ -177,11 +186,12 @@ struct grub_btrfs_dir_item
   grub_uint8_t type;
   char name[0];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_btrfs_leaf_descriptor
 {
-  unsigned depth;
-  unsigned allocated;
+  grub_size_t depth;
+  grub_size_t allocated;
   struct
   {
     grub_disk_addr_t addr;
@@ -191,6 +201,7 @@ struct grub_btrfs_leaf_descriptor
   } *data;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_btrfs_time
 {
   grub_int64_t sec;
@@ -225,6 +236,7 @@ struct grub_btrfs_extent_data
     };
   };
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 #define GRUB_BTRFS_EXTENT_INLINE 0
 #define GRUB_BTRFS_EXTENT_REGULAR 1
@@ -232,7 +244,9 @@ struct grub_btrfs_extent_data
 #define GRUB_BTRFS_COMPRESSION_NONE 0
 #define GRUB_BTRFS_COMPRESSION_ZLIB 1
 #define GRUB_BTRFS_COMPRESSION_LZO  2
+#ifndef NO_ZSTD
 #define GRUB_BTRFS_COMPRESSION_ZSTD 3
+#endif
 
 #define GRUB_BTRFS_OBJECT_ID_CHUNK 0x100
 
@@ -248,7 +262,7 @@ grub_btrfs_read_logical (struct grub_btrfs_data *data,
 static grub_err_t
 read_sblock (grub_disk_t disk, struct grub_btrfs_superblock *sb)
 {
-  struct grub_btrfs_superblock sblock;
+  struct grub_btrfs_superblock sblock = { 0 };
   unsigned i;
   grub_err_t err = GRUB_ERR_NONE;
   for (i = 0; i < ARRAY_SIZE (superblock_sectors); i++)
@@ -697,6 +711,7 @@ struct raid56_buffer {
   int  data_is_valid;
 };
 
+#ifndef NO_RAID_REBUILD
 static void
 rebuild_raid5 (char *dest, struct raid56_buffer *buffers,
 	       grub_uint64_t nstripes, grub_uint64_t csize)
@@ -751,6 +766,7 @@ rebuild_raid6 (struct raid56_buffer *buffers, grub_uint64_t nstripes,
   grub_raid6_recover_gen (buffers, nstripes, stripen, parities_pos,
                           dest, 0, csize, 0, raid6_recover_read_buffer);
 }
+#endif
 
 static grub_err_t
 raid56_read_retry (struct grub_btrfs_data *data,
@@ -837,6 +853,14 @@ raid56_read_retry (struct grub_btrfs_data *data,
       goto cleanup;
     }
   else
+#ifdef NO_RAID_REBUILD
+    {
+      /* EfiFs - Remove support for RAID rebuild */
+      grub_dprintf ("btrfs", "RAID rebuild is not supported by this driver\n");
+      ret = GRUB_ERR_READ_ERROR;
+      goto cleanup;
+    }
+#else
     grub_dprintf ("btrfs", "enough disks for RAID 5: total %"
 		  PRIuGRUB_UINT64_T ", missing %" PRIuGRUB_UINT64_T "\n",
 		  nstripes, failed_devices);
@@ -848,6 +872,7 @@ raid56_read_retry (struct grub_btrfs_data *data,
     rebuild_raid6 (buffers, nstripes, csize, parities_pos, buf, stripen);
 
   ret = GRUB_ERR_NONE;
+#endif
  cleanup:
   if (buffers)
     for (i = 0; i < nstripes; i++)
@@ -948,8 +973,8 @@ grub_btrfs_read_logical (struct grub_btrfs_data *data, grub_disk_addr_t addr,
 			       "couldn't find the chunk descriptor");
 	  }
 
-	nstripes = grub_le_to_cpu16 (chunk->nstripes) ? : 1;
-	chunk_stripe_length = grub_le_to_cpu64 (chunk->stripe_length) ? : 512;
+	nstripes = grub_le_to_cpu16 (chunk->nstripes) ? grub_le_to_cpu16 (chunk->nstripes) : 1;
+	chunk_stripe_length = grub_le_to_cpu64 (chunk->stripe_length) ? grub_le_to_cpu64 (chunk->stripe_length) : 512;
 	grub_dprintf ("btrfs", "chunk 0x%" PRIxGRUB_UINT64_T
 		      "+0x%" PRIxGRUB_UINT64_T
 		      " (%d stripes (%d substripes) of %"
@@ -1012,13 +1037,13 @@ grub_btrfs_read_logical (struct grub_btrfs_data *data, grub_disk_addr_t addr,
 	      grub_uint64_t middle, high;
 	      grub_uint64_t low;
 	      grub_uint16_t nsubstripes;
-	      nsubstripes = grub_le_to_cpu16 (chunk->nsubstripes) ? : 1;
+	      nsubstripes = grub_le_to_cpu16 (chunk->nsubstripes) ? grub_le_to_cpu16 (chunk->nsubstripes) : 1;
 	      middle = grub_divmod64 (off,
 				      chunk_stripe_length,
 				      &low);
 
 	      high = grub_divmod64 (middle,
-				    nstripes / nsubstripes ? : 1,
+				    nstripes / nsubstripes ? nstripes / nsubstripes : 1,
 				    &stripen);
 	      stripen *= nsubstripes;
 	      redundancy = nsubstripes;
@@ -1249,6 +1274,7 @@ grub_btrfs_read_inode (struct grub_btrfs_data *data,
   return grub_btrfs_read_logical (data, elemaddr, inode, sizeof (*inode), 0);
 }
 
+#ifndef NO_ZSTD
 static void *grub_zstd_malloc (void *state __attribute__((unused)), size_t size)
 {
   return grub_malloc (size);
@@ -1338,6 +1364,7 @@ err:
 
   return ret;
 }
+#endif
 
 static grub_ssize_t
 grub_btrfs_lzo_decompress(char *ibuf, grub_size_t isize, grub_off_t off,
@@ -1515,7 +1542,10 @@ grub_btrfs_extent_read (struct grub_btrfs_data *data,
       if (data->extent->compression != GRUB_BTRFS_COMPRESSION_NONE
 	  && data->extent->compression != GRUB_BTRFS_COMPRESSION_ZLIB
 	  && data->extent->compression != GRUB_BTRFS_COMPRESSION_LZO
-	  && data->extent->compression != GRUB_BTRFS_COMPRESSION_ZSTD)
+#ifndef NO_ZSTD
+	  && data->extent->compression != GRUB_BTRFS_COMPRESSION_ZSTD
+#endif
+	  )
 	{
 	  grub_error (GRUB_ERR_NOT_IMPLEMENTED_YET,
 		      "compression type 0x%x not supported",
@@ -1555,6 +1585,7 @@ grub_btrfs_extent_read (struct grub_btrfs_data *data,
 		  != (grub_ssize_t) csize)
 		return -1;
 	    }
+#ifndef NO_ZSTD
 	  else if (data->extent->compression == GRUB_BTRFS_COMPRESSION_ZSTD)
 	    {
 	      if (grub_btrfs_zstd_decompress (data->extent->inl, data->extsize -
@@ -1564,6 +1595,7 @@ grub_btrfs_extent_read (struct grub_btrfs_data *data,
 		  != (grub_ssize_t) csize)
 		return -1;
 	    }
+#endif
 	  else
 	    grub_memcpy (buf, data->extent->inl + extoff, csize);
 	  break;
@@ -1601,10 +1633,12 @@ grub_btrfs_extent_read (struct grub_btrfs_data *data,
 		ret = grub_btrfs_lzo_decompress (tmp, zsize, extoff
 				    + grub_le_to_cpu64 (data->extent->offset),
 				    buf, csize);
+#ifndef NO_ZSTD
 	      else if (data->extent->compression == GRUB_BTRFS_COMPRESSION_ZSTD)
 		ret = grub_btrfs_zstd_decompress (tmp, zsize, extoff
 				    + grub_le_to_cpu64 (data->extent->offset),
 				    buf, csize);
+#endif
 	      else
 		ret = -1;
 
diff --git a/grub-core/fs/f2fs.c b/grub-core/fs/f2fs.c
index 8a9992ca9..c40379b25 100644
--- a/grub-core/fs/f2fs.c
+++ b/grub-core/fs/f2fs.c
@@ -131,6 +131,7 @@ enum FILE_TYPE
   F2FS_FT_SYMLINK                 = 7
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_f2fs_superblock
 {
   grub_uint32_t                   magic;
@@ -281,6 +282,7 @@ struct grub_f2fs_node
   };
   grub_uint8_t                    dummy[40];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_fshelp_node
 {
diff --git a/grub-core/fs/fat.c b/grub-core/fs/fat.c
index dd82e4ee3..331e243c0 100644
--- a/grub-core/fs/fat.c
+++ b/grub-core/fs/fat.c
@@ -76,6 +76,7 @@ enum
   {
     FLAG_CONTIGUOUS = 2
   };
+PRAGMA_BEGIN_PACKED
 struct grub_fat_dir_entry
 {
   grub_uint8_t entry_type;
@@ -116,6 +117,7 @@ struct grub_fat_dir_entry
     }  GRUB_PACKED  volume_label;
   }  GRUB_PACKED type_specific;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_fat_dir_node
 {
@@ -130,6 +132,7 @@ struct grub_fat_dir_node
 typedef struct grub_fat_dir_node grub_fat_dir_node_t;
 
 #else
+PRAGMA_BEGIN_PACKED
 struct grub_fat_dir_entry
 {
   grub_uint8_t name[11];
@@ -157,6 +160,7 @@ struct grub_fat_long_name_entry
   grub_uint16_t first_cluster;
   grub_uint16_t name3[2];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 typedef struct grub_fat_dir_entry grub_fat_dir_node_t;
 
@@ -728,7 +732,7 @@ grub_fat_iterate_dir_next (grub_fshelp_node_t node,
       grub_dprintf ("exfat", "unknown primary type 0x%02x\n",
 		    dir->entry_type);
     }
-  return grub_errno ? : GRUB_ERR_EOF;
+  return grub_errno ? grub_errno : GRUB_ERR_EOF;
 }
 
 /*
@@ -882,7 +886,7 @@ grub_fat_iterate_dir_next (grub_fshelp_node_t node,
       return GRUB_ERR_NONE;
     }
 
-  return grub_errno ? : GRUB_ERR_EOF;
+  return grub_errno ? grub_errno : GRUB_ERR_EOF;
 }
 
 /*
diff --git a/grub-core/fs/hfs.c b/grub-core/fs/hfs.c
index f419965d1..d7b06da21 100644
--- a/grub-core/fs/hfs.c
+++ b/grub-core/fs/hfs.c
@@ -59,6 +59,7 @@ enum grub_hfs_cnid_type
   };
 
 /* A node descriptor.  This is the header of every node.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfs_node
 {
   grub_uint32_t next;
@@ -84,6 +85,7 @@ struct grub_hfs_treeheader
   grub_uint32_t free_nodes;
   grub_uint8_t unused[76];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* The state of a mounted HFS filesystem.  */
 struct grub_hfs_data
@@ -104,6 +106,7 @@ struct grub_hfs_data
 
 /* The key as used on disk in a catalog tree.  This is used to lookup
    file/directory nodes by parent directory ID and filename.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfs_catalog_key
 {
   grub_uint8_t unused;
@@ -157,6 +160,7 @@ struct grub_hfs_filerec
      in the extent overflow file.  */
   grub_hfs_datarecord_t extents;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* A record descriptor, both key and data, used to pass to call back
    functions.  */
@@ -721,11 +725,13 @@ grub_hfs_iterate_records (struct grub_hfs_data *data, int type, int idx,
       for (i = 0; i < reccnt; i++)
 	{
 	  int pos = (nodesize >> 1) - 1 - i;
+	  PRAGMA_BEGIN_PACKED
  	  struct pointer
 	  {
 	    grub_uint8_t keylen;
 	    grub_uint8_t key;
 	  } GRUB_PACKED *pnt;
+	  PRAGMA_END_PACKED
 	  grub_uint16_t off = grub_be_to_cpu16 (node->offsets[pos]);
 	  if (off > nodesize - sizeof(*pnt))
 	    continue;
diff --git a/grub-core/fs/hfsplus.c b/grub-core/fs/hfsplus.c
index 19c7b3367..6f62c39ff 100644
--- a/grub-core/fs/hfsplus.c
+++ b/grub-core/fs/hfsplus.c
@@ -45,6 +45,7 @@ enum grub_hfsplus_btnode_type
   };
 
 /* The header of a HFS+ B+ Tree.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_btheader
 {
   grub_uint16_t depth;
@@ -77,6 +78,7 @@ struct grub_hfsplus_catfile
   struct grub_hfsplus_forkdata data;
   struct grub_hfsplus_forkdata resource;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* Filetype information as used in inodes.  */
 #define GRUB_HFSPLUS_FILEMODE_MASK	0170000
diff --git a/grub-core/fs/hfspluscomp.c b/grub-core/fs/hfspluscomp.c
index d76f3f137..28c586d87 100644
--- a/grub-core/fs/hfspluscomp.c
+++ b/grub-core/fs/hfspluscomp.c
@@ -24,10 +24,12 @@
 #include <grub/mm.h>
 #include <grub/deflate.h>
 #include <grub/file.h>
+#include <grub/types.h>
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
 /* big-endian.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_compress_header1
 {
   grub_uint32_t header_size;
@@ -48,6 +50,7 @@ struct grub_hfsplus_compress_header3
 {
   grub_uint32_t num_chunks;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* little-endian.  */
 struct grub_hfsplus_compress_block_descriptor
@@ -56,6 +59,7 @@ struct grub_hfsplus_compress_block_descriptor
   grub_uint32_t size;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_compress_end_descriptor
 {
   grub_uint8_t always_the_same[50];
@@ -76,6 +80,7 @@ struct grub_hfsplus_compress_attr
   grub_uint32_t uncompressed_inline_size;
   grub_uint32_t always_0;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 enum
   {
diff --git a/grub-core/fs/iso9660.c b/grub-core/fs/iso9660.c
index ac011950a..cb9e31b9d 100644
--- a/grub-core/fs/iso9660.c
+++ b/grub-core/fs/iso9660.c
@@ -50,6 +50,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define GRUB_ISO9660_VOLDESC_END	255
 
 /* The head of a volume descriptor.  */
+PRAGMA_BEGIN_PACKED
 struct grub_iso9660_voldesc
 {
   grub_uint8_t type;
@@ -130,8 +131,18 @@ struct grub_iso9660_susp_entry
 {
   grub_uint8_t sig[2];
   grub_uint8_t len;
-  grub_uint8_t version;
-  grub_uint8_t data[0];
+/*! MSVC compilers cannot handle a zero sized array in the middle
+    of a struct, and grub_iso9660_susp_entry is reused within
+    grub_iso9660_susp_ce. Therefore, instead of defining:
+        grub_uint8_t version;
+        grub_uint8_t data[];
+    we leverage the fact that these attributes are the same size
+    and use an union. The only gotcha is that the actual
+    payload of u.data[] starts at 1, not 0. */
+  union {
+    grub_uint8_t  version;
+    grub_uint8_t  data[1];
+  } u;
 } GRUB_PACKED;
 
 /* The CE entry.  This is used to describe the next block where data
@@ -146,6 +157,7 @@ struct grub_iso9660_susp_ce
   grub_uint32_t len;
   grub_uint32_t len_be;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_iso9660_data
 {
@@ -413,7 +425,7 @@ set_rockridge (struct grub_iso9660_data *data)
 
       /* The 2nd data byte stored how many bytes are skipped every time
 	 to get to the SUA (System Usage Area).  */
-      data->susp_skip = entry->data[2];
+      data->susp_skip = entry->u.data[1 + 2];
       entry = (struct grub_iso9660_susp_entry *) ((char *) entry + entry->len);
 
       /* Iterate over the entries in the SUA area to detect
@@ -564,9 +576,9 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
       /* The flags are stored at the data position 0, here the
 	 filename type is stored.  */
       /* FIXME: Fix this slightly improper cast.  */
-      if (entry->data[0] & GRUB_ISO9660_RR_DOT)
+      if (entry->u.data[1 + 0] & GRUB_ISO9660_RR_DOT)
 	ctx->filename = (char *) ".";
-      else if (entry->data[0] & GRUB_ISO9660_RR_DOTDOT)
+      else if (entry->u.data[1 + 0] & GRUB_ISO9660_RR_DOTDOT)
 	ctx->filename = (char *) "..";
       else if (entry->len >= 5)
 	{
@@ -597,7 +609,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 	      return grub_errno;
 	    }
 	  ctx->filename_alloc = 1;
-	  grub_memcpy (ctx->filename + off, (char *) &entry->data[1], csize);
+	  grub_memcpy (ctx->filename + off, (char *) &entry->u.data[1 + 1], csize);
 	  ctx->filename[off + csize] = '\0';
 	}
     }
@@ -606,7 +618,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
     {
       /* At position 0 of the PX record the st_mode information is
 	 stored (little-endian).  */
-      grub_uint32_t mode = ((entry->data[0] + (entry->data[1] << 8))
+      grub_uint32_t mode = ((entry->u.data[1 + 0] + (entry->u.data[1 + 1] << 8))
 			    & GRUB_ISO9660_FSTYPE_MASK);
 
       switch (mode)
@@ -632,7 +644,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
       while (pos + sizeof (*entry) < entry->len)
 	{
 	  /* The current position is the `Component Flag'.  */
-	  switch (entry->data[pos] & 30)
+	  switch (entry->u.data[1 + pos] & 30)
 	    {
 	    case 0:
 	      {
@@ -646,9 +658,9 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 		      return grub_errno;
 		  }
 
-		add_part (ctx, (char *) &entry->data[pos + 2],
-			  entry->data[pos + 1]);
-		ctx->was_continue = (entry->data[pos] & 1);
+		add_part (ctx, (char *) &entry->u.data[1 + pos + 2],
+			  entry->u.data[1 + pos + 1]);
+		ctx->was_continue = (entry->u.data[1 + pos] & 1);
 		break;
 	      }
 
@@ -671,7 +683,7 @@ susp_iterate_dir (struct grub_iso9660_susp_entry *entry,
 
 	  /* In pos + 1 the length of the `Component Record' is
 	     stored.  */
-	  pos += entry->data[pos + 1] + 2;
+	  pos += entry->u.data[1 + pos + 1] + 2;
 	}
 
       /* Check if `grub_realloc' failed.  */
diff --git a/grub-core/fs/jfs.c b/grub-core/fs/jfs.c
index 6f7c43904..713636d02 100644
--- a/grub-core/fs/jfs.c
+++ b/grub-core/fs/jfs.c
@@ -61,6 +61,7 @@ struct grub_jfs_sblock
   char volname2[16];
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_jfs_extent
 {
   /* The length of the extent in filesystem blocks.  */
@@ -252,6 +253,7 @@ struct grub_jfs_diropen
   char name[256 * GRUB_MAX_UTF8_PER_UTF16 + 1];
   grub_uint32_t ino;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 
 static grub_dl_t my_mod;
diff --git a/grub-core/fs/nilfs2.c b/grub-core/fs/nilfs2.c
index 3c248a910..b8558fb2c 100644
--- a/grub-core/fs/nilfs2.c
+++ b/grub-core/fs/nilfs2.c
@@ -132,6 +132,7 @@ struct grub_nilfs2_super_block
   grub_uint32_t s_reserved[192];
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_nilfs2_dir_entry
 {
   grub_uint64_t inode;
@@ -144,6 +145,7 @@ struct grub_nilfs2_dir_entry
   char pad;
 #endif
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 enum
 {
@@ -753,7 +755,7 @@ static grub_err_t
 grub_nilfs2_load_sb (struct grub_nilfs2_data *data)
 {
   grub_disk_t disk = data->disk;
-  struct grub_nilfs2_super_block sb2;
+  struct grub_nilfs2_super_block sb2 = { 0 };
   grub_uint64_t partition_size;
   int valid[2];
   int swp = 0;
diff --git a/grub-core/fs/ntfs.c b/grub-core/fs/ntfs.c
index 2f34f76da..244a53825 100644
--- a/grub-core/fs/ntfs.c
+++ b/grub-core/fs/ntfs.c
@@ -638,6 +638,7 @@ list_file (struct grub_ntfs_file *diro, grub_uint8_t *pos,
   return 0;
 }
 
+PRAGMA_BEGIN_PACKED
 struct symlink_descriptor
 {
   grub_uint32_t type;
@@ -647,6 +648,7 @@ struct symlink_descriptor
   grub_uint16_t off2;
   grub_uint16_t len2;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 static char *
 grub_ntfs_read_symlink (grub_fshelp_node_t node)
diff --git a/grub-core/fs/reiserfs.c b/grub-core/fs/reiserfs.c
index af6a226a7..b76141fee 100644
--- a/grub-core/fs/reiserfs.c
+++ b/grub-core/fs/reiserfs.c
@@ -42,15 +42,27 @@
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
+#ifndef _MSC_VER
+#ifndef MIN
 #define MIN(a, b) \
   ({ typeof (a) _a = (a); \
      typeof (b) _b = (b); \
      _a < _b ? _a : _b; })
-
+#endif
+#ifndef MAX
 #define MAX(a, b) \
   ({ typeof (a) _a = (a); \
      typeof (b) _b = (b); \
      _a > _b ? _a : _b; })
+#endif
+#else
+#ifndef MIN
+#define MIN(a, b) ((a)<(b)?(a):(b))
+#endif
+#ifndef MAX
+#define MAX(a, b) ((a)>(b)?(a):(b))
+#endif
+#endif
 
 #define REISERFS_SUPER_BLOCK_OFFSET 0x10000
 #define REISERFS_MAGIC_LEN 12
@@ -82,6 +94,7 @@ enum grub_reiserfs_item_type
     GRUB_REISERFS_UNKNOWN
   };
 
+PRAGMA_BEGIN_PACKED
 struct grub_reiserfs_superblock
 {
   grub_uint32_t block_count;
@@ -217,6 +230,7 @@ struct grub_reiserfs_directory_header
   grub_uint16_t location;
   grub_uint16_t state;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_fshelp_node
 {
diff --git a/grub-core/fs/sfs.c b/grub-core/fs/sfs.c
index 983e88008..23085448c 100644
--- a/grub-core/fs/sfs.c
+++ b/grub-core/fs/sfs.c
@@ -31,6 +31,7 @@
 GRUB_MOD_LICENSE ("GPLv3+");
 
 /* The common header for a block.  */
+PRAGMA_BEGIN_PACKED
 struct grub_sfs_bheader
 {
   grub_uint8_t magic[4];
@@ -122,9 +123,10 @@ struct grub_sfs_btree
      supported.  */
   struct grub_sfs_btree_node node[1];
 } GRUB_PACKED;
-
+PRAGMA_END_PACKED
 
 
+
 struct cache_entry
 {
   grub_uint32_t off;
diff --git a/grub-core/fs/squash4.c b/grub-core/fs/squash4.c
index 6dd731e23..be286376b 100644
--- a/grub-core/fs/squash4.c
+++ b/grub-core/fs/squash4.c
@@ -51,6 +51,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
   unk2 containts one uint64_t
 */
 
+PRAGMA_BEGIN_PACKED
 struct grub_squash_super
 {
   grub_uint32_t magic;
@@ -89,7 +90,7 @@ struct grub_squash_inode
       grub_uint32_t fragment;
       grub_uint32_t offset;
       grub_uint32_t size;
-      grub_uint32_t block_size[0];
+      grub_uint32_t block_size[1];
     }  GRUB_PACKED file;
     struct {
       grub_uint64_t chunk;
@@ -98,7 +99,7 @@ struct grub_squash_inode
       grub_uint32_t fragment;
       grub_uint32_t offset;
       grub_uint32_t dummy3;
-      grub_uint32_t block_size[0];
+      grub_uint32_t block_size[1];
     }  GRUB_PACKED long_file;
     struct {
       grub_uint32_t chunk;
@@ -117,10 +118,11 @@ struct grub_squash_inode
     struct {
       grub_uint32_t dummy;
       grub_uint32_t namelen;
-      char name[0];
+      char name[1];
     } GRUB_PACKED symlink;
   }  GRUB_PACKED;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_squash_cache_inode
 {
@@ -131,6 +133,7 @@ struct grub_squash_cache_inode
   grub_disk_addr_t *cumulated_block_sizes;
 };
 
+PRAGMA_BEGIN_PACKED
 /* Chunk-based.  */
 struct grub_squash_dirent_header
 {
@@ -166,6 +169,7 @@ struct grub_squash_frag_desc
   grub_uint32_t size;
   grub_uint32_t dummy;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 enum
   {
diff --git a/grub-core/fs/udf.c b/grub-core/fs/udf.c
index 4ff97021c..41ca1f3d0 100644
--- a/grub-core/fs/udf.c
+++ b/grub-core/fs/udf.c
@@ -114,6 +114,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 #define GRUB_UDF_PARTMAP_TYPE_1		1
 #define GRUB_UDF_PARTMAP_TYPE_2		2
 
+PRAGMA_BEGIN_PACKED
 struct grub_udf_lb_addr
 {
   grub_uint32_t block_num;
@@ -371,6 +372,7 @@ struct grub_udf_aed
   grub_uint32_t prev_ae;
   grub_uint32_t ae_len;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_udf_data
 {
diff --git a/grub-core/fs/ufs.c b/grub-core/fs/ufs.c
index 34a698b71..bbb6d858e 100644
--- a/grub-core/fs/ufs.c
+++ b/grub-core/fs/ufs.c
@@ -152,6 +152,7 @@ struct grub_ufs_sblock
   grub_uint32_t magic;
 };
 
+PRAGMA_BEGIN_PACKED
 #ifdef MODE_UFS2
 /* UFS inode.  */
 struct grub_ufs_inode
@@ -235,6 +236,7 @@ struct grub_ufs_dirent
     };
   };
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* Information about a "mounted" ufs filesystem.  */
 struct grub_ufs_data
diff --git a/grub-core/fs/xfs.c b/grub-core/fs/xfs.c
index e3816d1ec..5c617882f 100644
--- a/grub-core/fs/xfs.c
+++ b/grub-core/fs/xfs.c
@@ -103,6 +103,7 @@ GRUB_MOD_LICENSE ("GPLv3+");
 	 XFS_SB_FEAT_INCOMPAT_BIGTIME | \
 	 XFS_SB_FEAT_INCOMPAT_NEEDSREPAIR)
 
+PRAGMA_BEGIN_PACKED
 struct grub_xfs_sblock
 {
   grub_uint8_t magic[4];
@@ -228,6 +229,7 @@ struct grub_xfs_dirblock_tail
   grub_uint32_t leaf_count;
   grub_uint32_t leaf_stale;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_fshelp_node
 {
diff --git a/grub-core/fs/zfs/zfs.c b/grub-core/fs/zfs/zfs.c
index 44e4e1814..ee48c26db 100644
--- a/grub-core/fs/zfs/zfs.c
+++ b/grub-core/fs/zfs/zfs.c
@@ -250,8 +250,8 @@ struct grub_zfs_data
   struct subvolume subvol;
 
   struct grub_zfs_device_desc *devices_attached;
-  unsigned n_devices_attached;
-  unsigned n_devices_allocated;
+  grub_size_t n_devices_attached;
+  grub_size_t n_devices_allocated;
   struct grub_zfs_device_desc *device_original;
 
   uberblock_t current_uberblock;
@@ -2722,7 +2722,9 @@ dnode_get (dnode_end_t * mdn, grub_uint64_t objnum, grub_uint8_t type,
   return GRUB_ERR_NONE;
 }
 
+#ifdef __GNUC__
 #pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif
 
 /*
  * Get the file dnode for a given file name where mdn is the meta dnode
diff --git a/grub-core/fs/zfs/zfs_lz4.c b/grub-core/fs/zfs/zfs_lz4.c
index 5453822d0..873445803 100644
--- a/grub-core/fs/zfs/zfs_lz4.c
+++ b/grub-core/fs/zfs/zfs_lz4.c
@@ -74,6 +74,7 @@ static int LZ4_uncompress_unknownOutputSize(const char *source, char *dest,
 #define	S32	grub_int32_t
 #define	U64	grub_uint64_t
 
+PRAGMA_BEGIN_PACKED
 typedef struct _U16_S {
 	U16 v;
 } GRUB_PACKED U16_S;
@@ -83,6 +84,7 @@ typedef struct _U32_S {
 typedef struct _U64_S {
 	U64 v;
 } GRUB_PACKED U64_S;
+PRAGMA_END_PACKED
 
 #define	A64(x)	(((U64_S *)(x))->v)
 #define	A32(x)	(((U32_S *)(x))->v)
diff --git a/grub-core/kern/misc.c b/grub-core/kern/misc.c
index 3af336ee2..fe10f33fd 100644
--- a/grub-core/kern/misc.c
+++ b/grub-core/kern/misc.c
@@ -139,7 +139,7 @@ grub_puts_ (const char *s)
   return grub_puts (_(s));
 }
 
-#if defined (__APPLE__) && ! defined (GRUB_UTIL)
+#if ( defined (__APPLE__) || defined (_MSC_VER) ) && ! defined (GRUB_UTIL)
 int
 grub_err_printf (const char *fmt, ...)
 {
@@ -154,7 +154,7 @@ grub_err_printf (const char *fmt, ...)
 }
 #endif
 
-#if ! defined (__APPLE__) && ! defined (GRUB_UTIL)
+#if ! defined (__APPLE__) && ! defined (_MSC_VER) && ! defined (GRUB_UTIL)
 int grub_err_printf (const char *fmt, ...)
 __attribute__ ((alias("grub_printf")));
 #endif
@@ -1047,7 +1047,7 @@ grub_vsnprintf_real (char *str, grub_size_t max_len, const char *fmt0,
 	  {
 	    grub_size_t len = 0;
 	    grub_size_t fill;
-	    const char *p = ((char *) (grub_addr_t) curarg) ? : "(null)";
+	    const char *p = (curarg != 0) ? ((char *) (grub_addr_t) curarg) : "(null)";
 	    grub_size_t i;
 
 	    while (len < format2 && p[len])
diff --git a/grub-core/lib/minilzo/lzodefs.h b/grub-core/lib/minilzo/lzodefs.h
index f4ae9487e..feee5cdf3 100644
--- a/grub-core/lib/minilzo/lzodefs.h
+++ b/grub-core/lib/minilzo/lzodefs.h
@@ -770,7 +770,7 @@
 #elif (LZO_OS_DOS16 || LZO_OS_OS216 || LZO_OS_WIN16)
 #  define LZO_ARCH_I086             1
 #  define LZO_INFO_ARCH             "i086"
-#elif defined(__aarch64__)
+#elif defined(__aarch64__) || defined(_M_ARM64)
 #  define LZO_ARCH_ARM64            1
 #  define LZO_INFO_ARCH             "arm64"
 #elif defined(__alpha__) || defined(__alpha) || defined(_M_ALPHA)
diff --git a/grub-core/lib/posix_wrap/limits.h b/grub-core/lib/posix_wrap/limits.h
index 7217138ff..811b8b075 100644
--- a/grub-core/lib/posix_wrap/limits.h
+++ b/grub-core/lib/posix_wrap/limits.h
@@ -23,18 +23,30 @@
 
 #define UCHAR_MAX GRUB_UCHAR_MAX
 #define USHRT_MAX GRUB_USHRT_MAX
+#ifndef UINT_MAX
 #define UINT_MAX GRUB_UINT_MAX
+#endif
+#ifndef ULONG_MAX
 #define ULONG_MAX GRUB_ULONG_MAX
+#endif
 #define SIZE_MAX GRUB_SIZE_MAX
 
 #define SCHAR_MIN GRUB_SCHAR_MIN
 #define SCHAR_MAX GRUB_SCHAR_MAX
 #define SHRT_MIN GRUB_SHRT_MIN
 #define SHRT_MAX GRUB_SHRT_MAX
+#ifndef INT_MIN
 #define INT_MIN GRUB_INT_MIN
+#endif
+#ifndef INT_MAX
 #define INT_MAX GRUB_INT_MAX
+#endif
+#ifndef LONG_MIN
 #define LONG_MIN GRUB_LONG_MIN
+#endif
+#ifndef LONG_MAX
 #define LONG_MAX GRUB_LONG_MAX
+#endif
 
 #define CHAR_BIT 8
 
diff --git a/grub-core/lib/xzembed/xz_config.h b/grub-core/lib/xzembed/xz_config.h
index 24d570f2b..e7ce86a7e 100644
--- a/grub-core/lib/xzembed/xz_config.h
+++ b/grub-core/lib/xzembed/xz_config.h
@@ -65,14 +65,24 @@
 #include "xz.h"
 #include <stdlib.h>
 
-#define kmalloc(size, flags) malloc(size)
-#define kfree(ptr) free(ptr)
-#define vmalloc(size) malloc(size)
-#define vfree(ptr) free(ptr)
-
+extern void grub_free(void* p);
+extern void* grub_malloc(grub_size_t size);
+extern void* grub_realloc(void* p, grub_size_t new_size);
+
+#define kmalloc(size, flags) grub_malloc(size)
+#define kfree(ptr) grub_free(ptr)
+#define vmalloc(size) grub_malloc(size)
+#define vfree(ptr) grub_free(ptr)
+
+#define memcmp grub_memcmp
+#define memcpy grub_memcpy
+#define memmove grub_memmove
+#define memset grub_memset
 #define memeq(a, b, size) (memcmp(a, b, size) == 0)
 #define memzero(buf, size) memset(buf, 0, size)
 
+#undef min
+#undef min_t
 #define min(x, y) ((x) < (y) ? (x) : (y))
 #define min_t(type, x, y) min(x, y)
 
diff --git a/grub-core/lib/xzembed/xz_dec_lzma2.c b/grub-core/lib/xzembed/xz_dec_lzma2.c
index af7b77079..f5215ab0f 100644
--- a/grub-core/lib/xzembed/xz_dec_lzma2.c
+++ b/grub-core/lib/xzembed/xz_dec_lzma2.c
@@ -24,7 +24,9 @@
 #include "xz_private.h"
 #include "xz_lzma2.h"
 
+#ifdef __GNUC__
 #pragma GCC diagnostic warning "-Wattributes"
+#endif
 
 /*
  * Range decoder initialization eats the first five bytes of each LZMA chunk.
@@ -1156,7 +1158,7 @@ enum xz_ret xz_dec_lzma2_reset(
 	if (s->dict.allocated > 0 && s->dict.allocated < s->dict.size)
 	{
 		/* enlarge dictionary buffer */
-		uint8_t * newdict = realloc(s->dict.buf,s->dict.size);
+		uint8_t * newdict = grub_realloc(s->dict.buf,s->dict.size);
 
 		if (! newdict)
 			return XZ_MEMLIMIT_ERROR;
diff --git a/grub-core/lib/xzembed/xz_stream.h b/grub-core/lib/xzembed/xz_stream.h
index f58397a15..2a64d1c8d 100644
--- a/grub-core/lib/xzembed/xz_stream.h
+++ b/grub-core/lib/xzembed/xz_stream.h
@@ -32,7 +32,7 @@
 
 #define STREAM_HEADER_SIZE 12
 
-#define HEADER_MAGIC "\3757zXZ\0"
+#define HEADER_MAGIC "\xFD" "7zXZ\0"
 #define HEADER_MAGIC_SIZE 6
 
 #define FOOTER_MAGIC "YZ"
diff --git a/include/grub/arm64/types.h b/include/grub/arm64/types.h
index d132c5eab..54b5e6398 100644
--- a/include/grub/arm64/types.h
+++ b/include/grub/arm64/types.h
@@ -23,7 +23,11 @@
 #define GRUB_TARGET_SIZEOF_VOID_P	8
 
 /* The size of long.  */
+#if defined(_MSC_VER)
+#define GRUB_TARGET_SIZEOF_LONG		4
+#else
 #define GRUB_TARGET_SIZEOF_LONG		8
+#endif
 
 /* currently only support little-endian.  */
 #undef GRUB_TARGET_WORDS_BIGENDIAN
diff --git a/include/grub/btrfs.h b/include/grub/btrfs.h
index 9d93fb6c1..f62312c04 100644
--- a/include/grub/btrfs.h
+++ b/include/grub/btrfs.h
@@ -16,6 +16,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
  */
+#include <grub/types.h>
 
 #ifndef GRUB_BTRFS_H
 #define GRUB_BTRFS_H	1
@@ -45,12 +46,14 @@ struct grub_btrfs_root_item
   grub_uint64_t inode;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_btrfs_key
 {
   grub_uint64_t object_id;
   grub_uint8_t type;
   grub_uint64_t offset;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 
 struct grub_btrfs_root_backref
diff --git a/include/grub/disk.h b/include/grub/disk.h
index f95aca929..f449fa17c 100644
--- a/include/grub/disk.h
+++ b/include/grub/disk.h
@@ -192,7 +192,7 @@ grub_convert_sector (grub_disk_addr_t sector,
     return sector;
   else if (log_sector_size_from < log_sector_size_to)
     {
-      sector = ALIGN_UP (sector, 1 << (log_sector_size_to - log_sector_size_from));
+      sector = ALIGN_UP (sector, (1 << (log_sector_size_to - log_sector_size_from)));
       return sector >> (log_sector_size_to - log_sector_size_from);
     }
   else
diff --git a/include/grub/exfat.h b/include/grub/exfat.h
index 2b8009cee..b7654d0aa 100644
--- a/include/grub/exfat.h
+++ b/include/grub/exfat.h
@@ -21,6 +21,7 @@
 
 #include <grub/types.h>
 
+PRAGMA_BEGIN_PACKED
 struct grub_exfat_bpb
 {
   grub_uint8_t jmp_boot[3];
@@ -42,6 +43,7 @@ struct grub_exfat_bpb
   grub_uint8_t num_ph_drive;
   grub_uint8_t reserved[8];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 #ifdef GRUB_UTIL
 #include <grub/disk.h>
diff --git a/include/grub/fat.h b/include/grub/fat.h
index 8d7e4a1e5..bf4441479 100644
--- a/include/grub/fat.h
+++ b/include/grub/fat.h
@@ -21,6 +21,7 @@
 
 #include <grub/types.h>
 
+PRAGMA_BEGIN_PACKED
 struct grub_fat_bpb
 {
   grub_uint8_t jmp_boot[3];
@@ -66,6 +67,7 @@ struct grub_fat_bpb
     } GRUB_PACKED fat32;
   } GRUB_PACKED version_specific;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 #ifdef GRUB_UTIL
 #include <grub/disk.h>
diff --git a/include/grub/hfs.h b/include/grub/hfs.h
index e27993c42..1a1943d67 100644
--- a/include/grub/hfs.h
+++ b/include/grub/hfs.h
@@ -36,6 +36,7 @@ typedef struct grub_hfs_extent grub_hfs_datarecord_t[3];
 
 /* The HFS superblock (The official name is `Master Directory
    Block').  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfs_sblock
 {
   grub_uint16_t magic;
@@ -68,5 +69,6 @@ struct grub_hfs_sblock
   grub_uint32_t catalog_size;
   grub_hfs_datarecord_t catalog_recs;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 #endif /* ! GRUB_HFS_HEADER */
diff --git a/include/grub/hfsplus.h b/include/grub/hfsplus.h
index e14dd31ff..d51bda77d 100644
--- a/include/grub/hfsplus.h
+++ b/include/grub/hfsplus.h
@@ -24,6 +24,7 @@
 #define GRUB_HFSPLUS_SBLOCK 2
 
 /* A HFS+ extent.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_extent
 {
   /* The first block of a file on disk.  */
@@ -68,6 +69,7 @@ struct grub_hfsplus_volheader
   struct grub_hfsplus_forkdata attr_file;
   struct grub_hfsplus_forkdata startup_file;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_hfsplus_compress_index
 {
@@ -140,6 +142,7 @@ struct grub_hfsplus_extkey_internal
   grub_uint8_t type;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_attrkey
 {
   grub_uint16_t keylen;
@@ -149,6 +152,7 @@ struct grub_hfsplus_attrkey
   grub_uint16_t namelen;
   grub_uint16_t name[0];
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_hfsplus_attrkey_internal
 {
@@ -168,6 +172,7 @@ struct grub_hfsplus_key_internal
 };
 
 /* The on disk layout of a catalog key.  */
+PRAGMA_BEGIN_PACKED
 struct grub_hfsplus_catkey
 {
   grub_uint16_t keylen;
@@ -206,6 +211,7 @@ struct grub_hfsplus_btnode
   grub_uint16_t count;
   grub_uint16_t unused;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* Return the offset of the record with the index INDEX, in the node
    NODE which is part of the B+ tree BTREE.  */
diff --git a/include/grub/misc.h b/include/grub/misc.h
index 7d2b55196..1798d2190 100644
--- a/include/grub/misc.h
+++ b/include/grub/misc.h
@@ -27,12 +27,22 @@
 #include <grub/i18n.h>
 #include <grub/compiler.h>
 
+#ifndef _MSC_VER
 #define ALIGN_UP(addr, align) \
 	(((addr) + (typeof (addr)) (align) - 1) & ~((typeof (addr)) (align) - 1))
 #define ALIGN_UP_OVERHEAD(addr, align) ((-(addr)) & ((typeof (addr)) (align) - 1))
 #define ALIGN_DOWN(addr, align) \
 	((addr) & ~((typeof (addr)) (align) - 1))
+#else
+#define ALIGN_UP(addr, align) \
+	(((addr) + (align) - 1) & ~((align) - 1))
+#define ALIGN_UP_OVERHEAD(addr, align) ((-(addr)) & ((align) - 1))
+#define ALIGN_DOWN(addr, align) \
+	((addr) & ~((align) - 1))
+#endif
+#ifndef ARRAY_SIZE
 #define ARRAY_SIZE(array) (sizeof (array) / sizeof (array[0]))
+#endif
 #define COMPILE_TIME_ASSERT(cond) switch (0) { case 1: case !(cond): ; }
 
 #define grub_dprintf(condition, ...) grub_real_dprintf(GRUB_FILE, __LINE__, condition, __VA_ARGS__)
@@ -261,6 +271,9 @@ grub_strncasecmp (const char *s1, const char *s2, grub_size_t n)
  *  ... or ...
  *  l = grub_strtoul(s, (const char ** const)&end, 10);
  */
+#ifdef _MSC_VER
+#define restrict
+#endif
 unsigned long EXPORT_FUNC(grub_strtoul) (const char * restrict str, const char ** const restrict end, int base);
 unsigned long long EXPORT_FUNC(grub_strtoull) (const char * restrict str, const char ** const restrict end, int base);
 
diff --git a/include/grub/ntfs.h b/include/grub/ntfs.h
index d1a6af696..203e0141e 100644
--- a/include/grub/ntfs.h
+++ b/include/grub/ntfs.h
@@ -101,6 +101,7 @@ enum
     GRUB_NTFS_RF_BLNK		= 1
   };
 
+PRAGMA_BEGIN_PACKED
 struct grub_ntfs_bpb
 {
   grub_uint8_t jmp_boot[3];
@@ -126,6 +127,7 @@ struct grub_ntfs_bpb
   grub_uint64_t num_serial;
   grub_uint32_t checksum;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 struct grub_ntfs_attr
 {
diff --git a/include/grub/safemath.h b/include/grub/safemath.h
index c17b89bba..2b7176e72 100644
--- a/include/grub/safemath.h
+++ b/include/grub/safemath.h
@@ -30,6 +30,14 @@
 #define grub_sub(a, b, res)	__builtin_sub_overflow(a, b, res)
 #define grub_mul(a, b, res)	__builtin_mul_overflow(a, b, res)
 
+#elif defined(_MSC_VER)
+
+#include <intsafe.h>
+
+#define grub_add(a, b, res)	UIntPtrAdd(a, b, res)
+#define grub_sub(a, b, res)	UIntPtrSub(a, b, res)
+#define grub_mul(a, b, res)	UIntPtrMult(a, b, res)
+
 #else
 #error gcc 5.1 or newer or clang 3.8 or newer is required
 #endif
diff --git a/include/grub/term.h b/include/grub/term.h
index 3387cb052..940d4c7c9 100644
--- a/include/grub/term.h
+++ b/include/grub/term.h
@@ -339,12 +339,12 @@ void grub_term_restore_pos (struct grub_term_coordinate *pos);
 
 static inline unsigned grub_term_width (struct grub_term_output *term)
 {
-  return term->getwh(term).x ? : 80;
+  return term->getwh(term).x ? term->getwh(term).x : 80;
 }
 
 static inline unsigned grub_term_height (struct grub_term_output *term)
 {
-  return term->getwh(term).y ? : 24;
+  return term->getwh(term).y ? term->getwh(term).y : 24;
 }
 
 static inline struct grub_term_coordinate
diff --git a/include/grub/types.h b/include/grub/types.h
index 0a3ff1591..7390e41e1 100644
--- a/include/grub/types.h
+++ b/include/grub/types.h
@@ -26,10 +26,20 @@
 
 #ifdef __MINGW32__
 #define GRUB_PACKED __attribute__ ((packed,gcc_struct))
+#elif defined(_MSC_VER)
+#define GRUB_PACKED
 #else
 #define GRUB_PACKED __attribute__ ((packed))
 #endif
 
+#ifdef _MSC_VER
+#define PRAGMA_BEGIN_PACKED __pragma(pack(push, 1))
+#define PRAGMA_END_PACKED   __pragma(pack(pop))
+#else
+#define PRAGMA_BEGIN_PACKED
+#define PRAGMA_END_PACKED
+#endif
+
 #ifdef GRUB_BUILD
 # define GRUB_CPU_SIZEOF_VOID_P	BUILD_SIZEOF_VOID_P
 # define GRUB_CPU_SIZEOF_LONG	BUILD_SIZEOF_LONG
@@ -193,19 +203,17 @@ static inline grub_uint16_t grub_swap_bytes16(grub_uint16_t _x)
 #define grub_swap_bytes16_compile_time(x) ((((x) & 0xff) << 8) | (((x) & 0xff00) >> 8))
 #define grub_swap_bytes32_compile_time(x) ((((x) & 0xff) << 24) | (((x) & 0xff00) << 8) | (((x) & 0xff0000) >> 8) | (((x) & 0xff000000UL) >> 24))
 #define grub_swap_bytes64_compile_time(x)	\
-({ \
-   grub_uint64_t _x = (x); \
-   (grub_uint64_t) ((_x << 56) \
-                    | ((_x & (grub_uint64_t) 0xFF00ULL) << 40) \
-                    | ((_x & (grub_uint64_t) 0xFF0000ULL) << 24) \
-                    | ((_x & (grub_uint64_t) 0xFF000000ULL) << 8) \
-                    | ((_x & (grub_uint64_t) 0xFF00000000ULL) >> 8) \
-                    | ((_x & (grub_uint64_t) 0xFF0000000000ULL) >> 24) \
-                    | ((_x & (grub_uint64_t) 0xFF000000000000ULL) >> 40) \
-                    | (_x >> 56)); \
-})
-
-#if (defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC__ > 4 || __GNUC_MINOR__ >= 3)) || defined(__clang__)
+((grub_uint64_t) ((((grub_uint64_t)x) << 56) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF00ULL) << 40) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF0000ULL) << 24) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF000000ULL) << 8) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF00000000ULL) >> 8) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF0000000000ULL) >> 24) \
+                    | ((((grub_uint64_t)x) & (grub_uint64_t) 0xFF000000000000ULL) >> 40) \
+                    | (((grub_uint64_t)x) >> 56)) \
+)
+
+#if ((defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC__ > 4 || __GNUC_MINOR__ >= 3)) || defined(__clang__)) && (!defined (__riscv))
 static inline grub_uint32_t grub_swap_bytes32(grub_uint32_t x)
 {
 	return __builtin_bswap32(x);
@@ -280,18 +288,24 @@ static inline grub_uint64_t grub_swap_bytes64(grub_uint64_t _x)
 
 #endif /* ! WORDS_BIGENDIAN */
 
+PRAGMA_BEGIN_PACKED
 struct grub_unaligned_uint16
 {
   grub_uint16_t val;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
+PRAGMA_BEGIN_PACKED
 struct grub_unaligned_uint32
 {
   grub_uint32_t val;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
+PRAGMA_BEGIN_PACKED
 struct grub_unaligned_uint64
 {
   grub_uint64_t val;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 typedef struct grub_unaligned_uint16 grub_unaligned_uint16_t;
 typedef struct grub_unaligned_uint32 grub_unaligned_uint32_t;
@@ -332,10 +346,12 @@ static inline grub_uint64_t grub_get_unaligned64 (const void *ptr)
 
 static inline void grub_set_unaligned64 (void *ptr, grub_uint64_t val)
 {
+  PRAGMA_BEGIN_PACKED
   struct grub_unaligned_uint64_t
   {
     grub_uint64_t d;
   } GRUB_PACKED;
+  PRAGMA_END_PACKED
   struct grub_unaligned_uint64_t *dd = (struct grub_unaligned_uint64_t *) ptr;
   dd->d = val;
 }
diff --git a/include/grub/unicode.h b/include/grub/unicode.h
index 4de986a85..d63a80dcb 100644
--- a/include/grub/unicode.h
+++ b/include/grub/unicode.h
@@ -29,6 +29,7 @@ struct grub_unicode_bidi_pair
   grub_uint32_t replace;
 };
 
+PRAGMA_BEGIN_PACKED
 struct grub_unicode_compact_range
 {
   unsigned start:21;
@@ -38,6 +39,7 @@ struct grub_unicode_compact_range
   unsigned bidi_mirror:1;
   unsigned join_type:3;
 } GRUB_PACKED;
+PRAGMA_END_PACKED
 
 /* Old-style Arabic shaping. Used for "visual UTF-8" and
    in grub-mkfont to find variant glyphs in absence of GPOS tables.  */
diff --git a/include/grub/x86_64/types.h b/include/grub/x86_64/types.h
index 0bbdc6d01..eefa80847 100644
--- a/include/grub/x86_64/types.h
+++ b/include/grub/x86_64/types.h
@@ -27,7 +27,7 @@
 #endif
 
 /* The size of long.  */
-#if defined(__MINGW32__) || defined(__ILP32__)
+#if defined(__MINGW32__) || defined(__ILP32__) || defined(_MSC_VER)
 #define GRUB_TARGET_SIZEOF_LONG		4
 #else
 #define GRUB_TARGET_SIZEOF_LONG		8
diff --git a/include/grub/zfs/zap_leaf.h b/include/grub/zfs/zap_leaf.h
index 11447c166..0479d383f 100644
--- a/include/grub/zfs/zap_leaf.h
+++ b/include/grub/zfs/zap_leaf.h
@@ -86,11 +86,13 @@ typedef union zap_leaf_chunk {
 	} l_entry;
 	struct zap_leaf_array {
 		grub_uint8_t la_type;		/* always ZAP_CHUNK_ARRAY */
+		PRAGMA_BEGIN_PACKED
 		union
 		{
 			grub_uint8_t la_array[ZAP_LEAF_ARRAY_BYTES];
 			grub_uint64_t la_array64;
 		} GRUB_PACKED;
+		PRAGMA_END_PACKED
 		grub_uint16_t la_next;		/* next blk or CHAIN_END */
 	} l_array;
 	struct zap_leaf_free {
diff --git a/include/grub/zfs/zio.h b/include/grub/zfs/zio.h
index 19ce136bb..11ee51b61 100644
--- a/include/grub/zfs/zio.h
+++ b/include/grub/zfs/zio.h
@@ -27,10 +27,12 @@
 
 #define	ZEC_MAGIC	0x210da7ab10c7a11ULL	/* zio data bloc tail */
 
+PRAGMA_BEGIN_PACKED
 typedef struct zio_eck {
 	grub_uint64_t	zec_magic;	/* for validation, endianness	*/
 	zio_cksum_t	zec_cksum;	/* 256-bit checksum		*/
 } GRUB_PACKED zio_eck_t;
+PRAGMA_END_PACKED
 
 /*
  * Gang block headers are self-checksumming and contain an array
-- 
2.33.0.windows.1

